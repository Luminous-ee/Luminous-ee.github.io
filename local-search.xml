<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python基础（九）：Python计算生态概览</title>
    <link href="/2023/01/30/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9APython%E8%AE%A1%E7%AE%97%E7%94%9F%E6%80%81%E6%A6%82%E8%A7%88/"/>
    <url>/2023/01/30/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9APython%E8%AE%A1%E7%AE%97%E7%94%9F%E6%80%81%E6%A6%82%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h1 id="python-计算生态概览">Python 计算生态概览</h1><h2 id="从数据处理到人工智能">9.1 从数据处理到人工智能</h2><h3 id="数据分析">9.1.1 数据分析</h3><ul><li><p>numpy：表达 n 维数组的最基础库</p><blockquote><p>将 n 维数组看成简单的数据对象进行直接的操作和运算，这是 numpy最大的价值。</p></blockquote><ul><li>Python 接口使用，C 语言实现，计算速度优异</li><li>Python 数据分析和科学计算的基础库</li><li>提供直接的矩阵运算、广播函数、线性代数等功能</li></ul></li><li><p>pandas</p><ul><li><p>提供了简单易用的数据结构和数据分析工具</p></li><li><p>由两种数据结构组成：<code>Series</code> 和<code>DataFrame</code></p><blockquote><p><code>Series</code>是由数字构成的列表，其中每个元素都有数据和索引</p><p><code>DataFrame</code>类似电子表格，同时具有行和列索引，可以将其看作是由 <code>Series</code>构成的字典</p></blockquote></li><li><p>Python 最主要的数据分析功能库，基于 numpy 开发</p></li></ul></li><li><p>scipy</p><ul><li>提供了一批数学算法及工程数据运算功能</li><li>Python 最主要的科学计算功能库，基于 numpy 开发</li></ul></li></ul><h3 id="数据可视化">9.1.2 数据可视化</h3><ul><li><p>matplotlib：高质量的二维数据可视化功能库</p><ul><li>提供了超过 100 种数据可视化展示效果</li><li>通过 matplotlib.pyplot 子库调用可视化效果</li><li>Python 最主要的数据可视化功能库，基于 numpy 开发</li></ul></li><li><p>seaborn：统计类数据可视化功能库</p><ul><li>提供了一批高层次的统计类数据可视化展示效果</li><li>基于 matplotlib 开发，支持 numpy 和 pandas</li></ul></li><li><p>mayavi：三维科学数据可视化功能库</p></li></ul><h3 id="文本处理">9.1.3 文本处理</h3><ul><li><p>pypdf2：用来处理 pdf 文件的工具集</p></li><li><p>NLTK：自然语言文本处理第三方库</p><ul><li>提供了一批简单易用的自然语言文本处理功能</li><li>最优秀的 Python 自然语言处理库</li></ul></li><li><p>Python-docx：创建或更新 Word 文件的第三方库</p></li></ul><h3 id="机器学习">9.1.4 机器学习</h3><ul><li><p>scikit-learn：机器学习方法工具集</p><ul><li>提供一批统一化的机器学习方法功能接口</li><li>提供分类、回归、聚类、强化学习等计算功能</li><li>基于 NumPy、SciPy 和 matplotlib 构建</li></ul></li><li><p>TensorFlow：机器学习计算框架</p></li><li><p>MxNet：基于神经网络的深度学习计算框架</p></li></ul><h2 id="从web解析到网络空间">9.2 从web解析到网络空间</h2><h3 id="网络爬虫">9.2.1 网络爬虫</h3><ul><li><p>requests：网络爬虫功能库</p></li><li><p>scrapy：网络爬虫框架</p></li><li><p>pyspider：web 页面爬取系统</p></li></ul><h3 id="web信息提取">9.2.2 web信息提取</h3><ul><li><p>beautifulsoup4：HTML 和 XML 的解析库</p></li><li><p>re：正则表达式解析和处理功能库</p><blockquote><p>Python最主要的标准库之一，无需安装</p></blockquote></li><li><p>Python-Goose：提取文章类型 web 页面的功能库</p></li></ul><h3 id="web网站开发">9.2.3 web网站开发</h3><ul><li><p>Django：复杂的 web 应用框架</p></li><li><p>Pyramid：中规模的 web 应用框架</p></li><li><p>Flask：web 应用开发微框架</p><blockquote><p>提供了最简单的构建 web 系统的应用框架</p></blockquote></li></ul><h3 id="网络应用开发">9.2.4 网络应用开发</h3><ul><li><p>WeRoBot：微信公众号开发框架</p></li><li><p>aip：百度 AI 开放平台接口</p></li><li><p>MyQR：二维码生成第三方库</p></li></ul><h2 id="从人机交互到艺术设计">9.3 从人机交互到艺术设计</h2><h3 id="图形用户界面">9.3.1 图形用户界面</h3><ul><li><p>PyQt5：Qt 开发框架的 Python 接口</p></li><li><p>wxPython：专用于 Python 的跨平台 GUI 开发框架</p></li><li><p>PyGObject：使用 GTK+ 开发 GUI 的功能库</p><blockquote><p>GTK+ 是一套跨多种平台的图形工具包</p></blockquote></li></ul><h3 id="游戏开发">9.3.2 游戏开发</h3><ul><li><p>PyGame：简单的游戏开发功能库</p></li><li><p>Panda3D：开源跨平台的 3D 渲染和游戏开发库</p></li><li><p>cocos2d：构建2d游戏和图形界面交互式应用的框架</p></li></ul><h3 id="虚拟现实">9.3.3 虚拟现实</h3><ul><li><p>VR Zero：在树莓派上开发 VR 应用的 Python 库</p></li><li><p>pyovr：针对 Oculus 公司 VR 设备的库</p></li><li><p>Vizard：基于 Python 的通用 VR 开发引擎</p></li></ul><h3 id="图形艺术">9.3.4 图形艺术</h3><ul><li><p>Quads：展示迭代艺术的第三方库</p></li><li><p>ascii_art：采用 ASCII 码展示图形艺术的第三方库</p></li><li><p>turtle：海龟绘图体系</p></li></ul><h2 id="导图">导图</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301261637754.png" /></p><h1 id="tips">Tips</h1><h2 id="numpy"><a href="https://numpy.org/">NumPy</a></h2><ol type="1"><li><p>介绍</p><p>NumPy 是 Python科学计算的基本库，提供了多维数组对象、各种派生对象（如矩阵）和一系列用于对数组进行快速操作的例程，包括数学、逻辑、形状操作、排序、选择、I/O、离散傅里叶变换、基本线性代数、基本统计操作、随机模拟等等。</p></li><li><p>NumPy 库的核心是 ndarray 对象。NumPy 数组和标准 Python序列之间有几个重要的区别：</p><ul><li>NumPy 数组在创建时具有固定的大小，与 Python列表（可以动态增长）不同。更改 ndarray的大小将创建一个新数组并删除原始数组。</li><li>NumPy数组中的元素都具有相同的数据类型，因此在内存中的大小相同。</li><li>NumPy 数组有助于对大量数据进行高级数学和其他类型的操作。与使用Python 的内置序列相比，此类操作的执行效率更高，代码更少。</li></ul></li><li><p>创建数组</p><blockquote><p><code>import numpy as np</code></p></blockquote><table><thead><tr class="header"><th style="text-align: center;">函数</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>np.array()</code></td><td style="text-align: center;">创建一个数组。参数传递一个<strong>python 序列</strong></td></tr><tr class="even"><td style="text-align: center;"><code>np.zeros()</code></td><tdstyle="text-align: center;">返回一个<strong>给定形状和类型</strong>的新数组，用<code>0</code> 填充。</td></tr><tr class="odd"><td style="text-align: center;"><code>np.ones()</code></td><tdstyle="text-align: center;">返回一个<strong>给定形状和类型</strong>的新数组，用<code>1</code> 填充。</td></tr><tr class="even"><td style="text-align: center;"><code>np.empty()</code></td><tdstyle="text-align: center;">返回<strong>给定形状和类型</strong>的新数组，初始内容是随机的，取决于内存的状态。</td></tr><tr class="odd"><td style="text-align: center;"><code>np.arange()</code></td><tdstyle="text-align: center;">返回<strong>给定间隔内均匀分布</strong>的数组，指定<strong>范围和步长</strong>。</td></tr><tr class="even"><td style="text-align: center;"><code>np.linspace()</code></td><tdstyle="text-align: center;">返回<strong>指定间隔内均匀分布</strong>的数组，指定<strong>范围和个数</strong>。</td></tr></tbody></table></li><li><p>数组属性</p><table><thead><tr class="header"><th style="text-align: center;">属性</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>ndarray.shape</code></td><tdstyle="text-align: center;">数组维度的元组。通常用于获取数组的当前形状。</td></tr><tr class="even"><td style="text-align: center;"><code>ndarray.ndim</code></td><tdstyle="text-align: center;">数组维度的数量，即轴的数量，称为秩。</td></tr><tr class="odd"><td style="text-align: center;"><code>ndarray.size</code></td><td style="text-align: center;">数组中的元素数。</td></tr><tr class="even"><td style="text-align: center;"><code>ndarray.itemsize</code></td><tdstyle="text-align: center;">一个数组元素的长度（以字节为单位）。</td></tr><tr class="odd"><td style="text-align: center;"><code>ndarray.dtype</code></td><td style="text-align: center;">数组元素的数据类型。</td></tr></tbody></table></li><li><p>索引和切片：像对 Python 列表进行切片一样对 NumPy数组进行索引和切片。</p><blockquote><p>如果要从数组中选择满足特定条件的值， NumPy很简单。<code>print(a[(a &gt; 2) &amp; (a &lt; 11)])</code></p></blockquote></li><li><p>从现有数据创建数组：</p><table><thead><tr class="header"><th style="text-align: center;">函数</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>np.vstack((a1, a2))</code></td><tdstyle="text-align: center;"><strong>垂直堆叠</strong>两个现有阵列</td></tr><tr class="even"><td style="text-align: center;"><code>np.hstack((a1, a2))</code></td><tdstyle="text-align: center;"><strong>水平堆叠</strong>两个现有阵列</td></tr><tr class="odd"><td style="text-align: center;"><code>np.hsplit(x, 3)</code></td><td style="text-align: center;">将数组 x 拆分为三个形状相等的数组</td></tr><tr class="even"><td style="text-align: center;"><code>b = a</code></td><tdstyle="text-align: center;"><strong>简单赋值</strong>不会复制对象或其数据。</td></tr><tr class="odd"><td style="text-align: center;"><code>c = a.view()</code></td><tdstyle="text-align: center;"><strong>浅拷贝</strong>，创建一个查看相同数据的新数组对象</td></tr><tr class="even"><td style="text-align: center;"><code>d = a.copy()</code></td><tdstyle="text-align: center;"><strong>深拷贝</strong>，创建数组及其数据的完整副本。</td></tr></tbody></table></li><li><p>数组操作</p><ul><li><p>基本操作：加<code>+</code>、减<code>-</code>、乘<code>*</code>、除<code>/</code>、求和<code>ndarray.sum()</code></p><blockquote><p>广播：NumPy 明白基本操作应该发生在每个元素上。</p></blockquote></li><li><p>更有用的操作：<code>ndarray.max()</code>、<code>ndarray.min()</code></p></li></ul></li><li><p>其他操作：</p><table><thead><tr class="header"><th style="text-align: center;">函数</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>np.flip()</code></td><td style="text-align: center;">反转数组</td></tr><tr class="even"><td style="text-align: center;"><code>ndarray.flatten()</code></td><td style="text-align: center;">将阵列展平为一维数组</td></tr></tbody></table></li><li><p>使用 Matplotlib 绘制数组</p></li></ol><h2 id="matplotlib"><ahref="https://matplotlib.org/">Matplotlib</a></h2><p><code>matplotlib.pyplot</code></p><ol type="1"><li><p>介绍：</p><p><code>matplotlib.pyplot</code> 是一个函数集合，使得<strong>matplotlib</strong> 像 MATLAB一样工作。每个函数对图形进行一些更改：例如，创建一个图形，在图形中创建绘图区域，在绘图区域中绘制一些线条，用标签等装饰绘图。</p><blockquote><p><code>import matplotlib.pyplot as plt</code></p></blockquote></li><li><p>一些绘图命令</p><table><thead><tr class="header"><th style="text-align: center;">函数</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>plt.figure()</code></td><td style="text-align: center;">创建新图形</td></tr><tr class="even"><td style="text-align: center;"><code>plt.grid()</code></td><td style="text-align: center;">配置网格线</td></tr><tr class="odd"><td style="text-align: center;"><code>plt.plot()</code></td><td style="text-align: center;">将 x 与 y 绘制为线条或标记</td></tr><tr class="even"><td style="text-align: center;"><code>plt.subplot()</code></td><td style="text-align: center;">将子图添加到当前图形</td></tr><tr class="odd"><td style="text-align: center;"><code>plt.show()</code></td><td style="text-align: center;">展示所有打开的图形</td></tr><tr class="even"><td style="text-align: center;"><code>plt.text()</code></td><td style="text-align: center;">将文本 s 添加到坐标 (x，y) 处的轴</td></tr><tr class="odd"><td style="text-align: center;"><code>plt.title()</code></td><td style="text-align: center;">设置轴的标题</td></tr><tr class="even"><tdstyle="text-align: center;"><code>plt.xlabel()/plt.ylabel()</code></td><td style="text-align: center;">设置 x / y 轴的标签</td></tr><tr class="odd"><td style="text-align: center;"><code>plt.xlim()/plt.ylim()</code></td><td style="text-align: center;">获取或设置当前轴 x / y 的范围</td></tr></tbody></table></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 与 Packages（六）：os库</title>
    <link href="/2023/01/29/Python-%E4%B8%8E-Packages%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9Aos%E5%BA%93/"/>
    <url>/2023/01/29/Python-%E4%B8%8E-Packages%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9Aos%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="os库">OS库</h1><blockquote><p>os 库是 Python<strong>标准库</strong>，包含几百个函数，包括了常用路径操作、进程管理、环境参数等几类。</p></blockquote><ol type="1"><li><p><code>os.path</code> 模块：主要用于获取文件的属性。</p><table><thead><tr class="header"><th style="text-align: center;">函数</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>os.path.abspath(path)</code></td><td style="text-align: center;">返回绝对路径</td></tr><tr class="even"><td style="text-align: center;"><code>os.path.normpath(path)</code></td><td style="text-align: center;">规范 path的字符串形式，统一用<code>\\</code>分隔路径</td></tr><tr class="odd"><tdstyle="text-align: center;"><code>os.path.relpath(path[, start])</code></td><td style="text-align: center;">返回从 start 开始计算的相对路径</td></tr><tr class="even"><td style="text-align: center;"><code>os.path.basename(path)</code></td><td style="text-align: center;">返回文件名</td></tr><tr class="odd"><td style="text-align: center;"><code>os.path.dirname(path)</code></td><td style="text-align: center;">返回文件路径（即文件所在目录）</td></tr><tr class="even"><tdstyle="text-align: center;"><code>os.path.join(path1[, path2[, ...]])</code></td><td style="text-align: center;">把路径组合成一个路径字符串</td></tr><tr class="odd"><td style="text-align: center;"><code>os.path.exists(path)</code></td><td style="text-align: center;">判断路径存在则返回 True，路径损坏返回False</td></tr><tr class="even"><td style="text-align: center;"><code>os.path.isfile(path)</code></td><td style="text-align: center;">判断路径是否为文件</td></tr><tr class="odd"><td style="text-align: center;"><code>os.path.isdir(path)</code></td><td style="text-align: center;">判断路径是否为目录</td></tr><tr class="even"><td style="text-align: center;"><code>os.path.getatime(path)</code></td><td style="text-align: center;">返回最近访问时间（浮点型秒数）</td></tr><tr class="odd"><td style="text-align: center;"><code>os.path.getmtime(path)</code></td><td style="text-align: center;">返回最近修改时间</td></tr><tr class="even"><td style="text-align: center;"><code>os.path.getctime(path)</code></td><td style="text-align: center;">返回文件创建时间</td></tr><tr class="odd"><td style="text-align: center;"><code>os.path.getsize(path)</code></td><tdstyle="text-align: center;">返回文件大小，如果文件不存在就返回错误</td></tr></tbody></table></li><li><p><code>os.system(command)</code>：执行程序或系统命令command</p></li><li><p>环境参数</p><table><thead><tr class="header"><th style="text-align: center;">函数</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>os.chdir(path)</code></td><td style="text-align: center;">改变当前工作目录到指定的路径 path</td></tr><tr class="even"><td style="text-align: center;"><code>os.getcwd()</code></td><td style="text-align: center;">返回当前工作目录</td></tr><tr class="odd"><td style="text-align: center;"><code>os.getlogin()</code></td><td style="text-align: center;">获取当前系统登录用户名称</td></tr><tr class="even"><td style="text-align: center;"><code>os.cpu_count()</code></td><td style="text-align: center;">获取当前系统的 CPU 数量</td></tr><tr class="odd"><td style="text-align: center;"><code>os.urandom(n)</code></td><td style="text-align: center;">获得 n个字节长度的随机字符串，通常用于加解密运算</td></tr></tbody></table></li><li><p>实例：第三方库自动安装脚本</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> oslib = &#123;<span class="hljs-string">&quot;numpy&quot;</span>, <span class="hljs-string">&quot;matplotlib&quot;</span>, <span class="hljs-string">&quot;pillow&quot;</span>, <span class="hljs-string">&quot;sklearn&quot;</span>, <span class="hljs-string">&quot;requests&quot;</span>, \        <span class="hljs-string">&quot;jieba&quot;</span>, <span class="hljs-string">&quot;beautifulsoup4&quot;</span>, <span class="hljs-string">&quot;wheel&quot;</span>, <span class="hljs-string">&quot;networkx&quot;</span>, <span class="hljs-string">&quot;sympy&quot;</span>, \        <span class="hljs-string">&quot;pyinstaller&quot;</span>, <span class="hljs-string">&quot;django&quot;</span>, <span class="hljs-string">&quot;flask&quot;</span>, <span class="hljs-string">&quot;werobot&quot;</span>, <span class="hljs-string">&quot;pyqt5&quot;</span>, \        <span class="hljs-string">&quot;pandas&quot;</span>, <span class="hljs-string">&quot;pyopengl&quot;</span>, <span class="hljs-string">&quot;pypdf2&quot;</span>, <span class="hljs-string">&quot;docopt&quot;</span>, <span class="hljs-string">&quot;pygame&quot;</span>&#125;<span class="hljs-keyword">try</span>:    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> lib:        os.system(<span class="hljs-string">&quot;pip3 install &quot;</span> + item)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;successfully&quot;</span>)<span class="hljs-keyword">except</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;failed&quot;</span>)</code></pre></div></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础（八）：程序设计方法学</title>
    <link href="/2023/01/28/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%E5%AD%A6/"/>
    <url>/2023/01/28/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="程序设计方法学">程序设计方法学</h1><h2 id="自顶向下和自底向上">8.1 自顶向下和自底向上</h2><h3 id="自顶向下设计分而治之">自顶向下设计：分而治之</h3><ol type="1"><li>将一个总问题分解为若干个小问题</li><li>使用同样的方法进一步分解小问题</li><li>直到小问题可以用计算机简单明了的解决</li></ol><h3 id="自底向上执行模块化集成">自底向上执行：模块化集成</h3><ol type="1"><li>分单元测试，逐步向上组装</li><li>直到系统各部分以组装的思路都经过测试和验证</li></ol><h3 id="实例体育竞技分析">实例：体育竞技分析</h3><ol type="1"><li><p>整体框架</p><ul><li>步骤1：打印程序的介绍信息</li><li>步骤2：获取参数 proA，proB，n</li><li>步骤3：利用球员 A 和 B 的能力值 proA 和 proB，模拟 n 局比赛</li><li>步骤4：输出球员 A 和 B 获胜比赛的场次及概率</li></ul></li><li><p>自顶向下设计</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202211111645669.png"alt="Untitled" /><figcaption aria-hidden="true">Untitled</figcaption></figure></li><li><p>自底向上执行</p></li></ol><p>代码：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<span class="hljs-keyword">def</span> <span class="hljs-title function_">printInfo</span>():    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;体育竞技分析问题&quot;</span>.center(<span class="hljs-number">30</span>, <span class="hljs-string">&quot;*&quot;</span>))    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;需要输入选手A和选手B的能力值&quot;</span>.center(<span class="hljs-number">25</span>, <span class="hljs-string">&quot;*&quot;</span>))<span class="hljs-keyword">def</span> <span class="hljs-title function_">getInput</span>():    a = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入选手A的能力值(0-1): &quot;</span>))    b = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入选手B的能力值(0-1): &quot;</span>))    n = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入比赛场数: &quot;</span>))    <span class="hljs-keyword">return</span> a, b, n<span class="hljs-keyword">def</span> <span class="hljs-title function_">gameOver</span>(<span class="hljs-params">scoreA, scoreB</span>):    <span class="hljs-keyword">return</span> scoreA == <span class="hljs-number">15</span> <span class="hljs-keyword">or</span> scoreB == <span class="hljs-number">15</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">simOneGame</span>(<span class="hljs-params">proA, proB</span>):    flag = <span class="hljs-string">&quot;A&quot;</span>    scoreA, scoreB = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> gameOver(scoreA, scoreB):        <span class="hljs-keyword">if</span> flag == <span class="hljs-string">&quot;A&quot;</span>:            <span class="hljs-keyword">if</span> random.random() &lt; proA:                scoreA += <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                flag = <span class="hljs-string">&quot;B&quot;</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">if</span> random.random() &lt; proB:                scoreB += <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                flag = <span class="hljs-string">&quot;A&quot;</span>    <span class="hljs-keyword">return</span> scoreA, scoreB<span class="hljs-keyword">def</span> <span class="hljs-title function_">simNGames</span>(<span class="hljs-params">proA, proB, n</span>):    winCountA, winCountB = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):        scoreA, scoreB = simOneGame(proA, proB)        <span class="hljs-keyword">if</span> scoreA &gt; scoreB:            winCountA += <span class="hljs-number">1</span>        <span class="hljs-keyword">elif</span> scoreA &lt; scoreB:            winCountB += <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> winCountA, winCountB<span class="hljs-keyword">def</span> <span class="hljs-title function_">printSummary</span>(<span class="hljs-params">winsA, winsB</span>):    n = winsA + winsB    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;共模拟&#123;&#125;场比赛&quot;</span>.<span class="hljs-built_in">format</span>(n))    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A获胜场数为&#123;&#125;, 获胜概率为&#123;:.1%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(winsA, winsA / n))    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B获胜场数为&#123;&#125;, 获胜概率为&#123;:.1%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(winsB, winsB / n))<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    printInfo()    proA, proB, n = getInput()    winsA, winsB = simNGames(proA, proB, n)    printSummary(winsA, winsB)main()</code></pre></div><p>运行：</p><div class="code-wrapper"><pre><code class="hljs">***********体育竞技分析问题****************需要输入选手A和选手B的能力值*****请输入选手A的能力值(0-1): 0.5请输入选手B的能力值(0-1): 0.47请输入比赛场数: 101共模拟101场比赛A获胜场数为69, 获胜概率为68.3%B获胜场数为32, 获胜概率为31.7%</code></pre></div><h2 id="python程序设计思维">8.2 python程序设计思维</h2><ol type="1"><li><p>计算思维</p><ul><li><p>计算思维被称为人类第三种思维特征</p><ul><li>逻辑思维：推理和演绎，数学为代表</li><li>实证思维：实验和验证，物理为代表</li><li>计算思维：抽象和自动化，基于计算机的思维方式</li></ul></li><li><p>抽象问题的计算过程，利用计算机自动化求解</p></li></ul></li><li><p>计算生态</p><ul><li>Python提供 &gt;15万个第三方库，库的建设经过野蛮生长和自然选择。</li><li>Python 库之间竞争发展、相互依存、快速更迭。</li><li>编写程序不再是探究每个算法的具体实现，而是尽可能利用第三方库进行代码复用。</li></ul></li><li><p>用户体验</p></li><li><p>基本的程序设计模式</p><ul><li>IPO：Input-Process-Output</li><li>自顶向下设计</li><li>模块化设计：模块内部紧耦合、模块之间松耦合</li><li>配置化设计：程序执行和配置分离，将可选参数写入配置文件</li></ul></li></ol><h1 id="tips">Tips</h1><h2 id="python-第三方库的安装">python 第三方库的安装</h2><ol type="1"><li><p>PyPI · The Python Package Index：<ahref="https://pypi.org/">https://pypi.org/</a></p><p><imgsrc="https://pypi.org/static/images/logo-large.9f732b5f.svg" /></p><ul><li><p>Python Package Index (PyPI) 是 Python编程语言的软件存储库。</p></li><li><p>PyPI 可帮助您查找和安装由 Python 社区开发和共享的软件。</p></li><li><p>Package 作者使用 PyPI 来分发他们的软件。</p></li></ul></li><li><p>pip 安装方法</p><table><thead><tr class="header"><th style="text-align: center;">命令</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><tdstyle="text-align: center;"><code>pip install &lt;第三方库名&gt;</code></td><td style="text-align: center;">安装指定的第 3 三方库</td></tr><tr class="even"><tdstyle="text-align: center;"><code>pip install -U &lt;第三方库名&gt;</code></td><td style="text-align: center;">使用 -U 更新已安装的指定第三方库</td></tr><tr class="odd"><tdstyle="text-align: center;"><code>pip uninstall &lt;第三方库名&gt;</code></td><td style="text-align: center;">卸载指定的第三方库</td></tr><tr class="even"><tdstyle="text-align: center;"><code>pip download &lt;第三方库名&gt;</code></td><td style="text-align: center;">下载但不安装指定的第三方库</td></tr><tr class="odd"><tdstyle="text-align: center;"><code>pip show &lt;第三方库名&gt;</code></td><td style="text-align: center;">列出某个指定第三方库的详细信息</td></tr><tr class="even"><tdstyle="text-align: center;"><code>pip search &lt;关键词&gt;</code></td><tdstyle="text-align: center;">根据关键词在名称和介绍中搜索第三方库</td></tr><tr class="odd"><td style="text-align: center;"><code>pip list</code></td><td style="text-align: center;">列出当前系统已经安装的第 3 三方库</td></tr></tbody></table></li><li><p>集成安装方法</p><ul><li><p>结合特定 Python 开发工具的批量安装，如 <ahref="https://www.anaconda.com/">Anaconda</a>。</p><blockquote><p>Anaconda 提供了在一台机器上执行 Python/R数据科学和机器学习的最简单方法。</p></blockquote></li></ul></li><li><p>文件安装方法</p><ul><li>由于 Python 某些第三方库仅提供源代码，通过 pip 下载后无法在 Windows系统编译安装。</li><li>可直接下载已经编译后的第三方库文件，再使用<code>pip install &lt;文件名&gt;</code> 安装。</li><li>下载地址：<ahref="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 与 Packages（五）：jieba + wordcloud</title>
    <link href="/2023/01/27/Python-%E4%B8%8E-Packages%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Ajieba-wordcloud/"/>
    <url>/2023/01/27/Python-%E4%B8%8E-Packages%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Ajieba-wordcloud/</url>
    
    <content type="html"><![CDATA[<h1 id="jieba-库中文分词第三方库"><strong>jieba</strong>库：中文分词第三方库</h1><blockquote><p>jieba 是优秀的中文分词第三方库</p><p>安装：<code>pip install jieba</code></p></blockquote><ul><li><p>jieba库常用函数</p><table><thead><tr class="header"><th style="text-align: center;">函数</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>jieba.lcut(s)</code></td><tdstyle="text-align: center;"><strong>精确模式</strong>，返回一个列表类型的分词结果</td></tr><tr class="even"><tdstyle="text-align: center;"><code>jieba.lcut(s,cut_all=True)</code></td><tdstyle="text-align: center;"><strong>全模式</strong>，返回一个列表类型的分词结果，存在冗余</td></tr><tr class="odd"><tdstyle="text-align: center;"><code>jieba.lcut_for_search(s)</code></td><tdstyle="text-align: center;"><strong>搜索引擎模式</strong>，返回一个列表类型的分词结果，存在冗余</td></tr><tr class="even"><td style="text-align: center;"><code>jieba.add_word(w)</code></td><td style="text-align: center;">向分词词典<strong>增加新词w</strong></td></tr></tbody></table></li></ul><h1 id="wordcloud-库词云展示第三方库"><strong>wordcloud</strong>库：词云展示第三方库</h1><h2 id="由文本变为词云wordcloud-库做了什么">由文本变为词云，wordcloud库做了什么？</h2><ol type="1"><li>分隔：将文本以空格分隔成单词</li><li>统计：单词出现的次数并过滤</li><li>字体：根据统计配置字号</li><li>布局：颜色环境尺寸</li></ol><blockquote><p>所以使用时只需要给出一个以空格分隔的字符串就可以了。</p></blockquote><h2 id="实现步骤">实现步骤</h2><ol type="1"><li><p><code>w = wordcloud.WordCloud(&lt;参数&gt;)</code>创建一个词云对象 <code>w</code></p><ul><li><p>参数</p><table><thead><tr class="header"><th style="text-align: center;">参数</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>width</code></td><td style="text-align: center;">指定词云对象生成图片的宽度。默认 400像素</td></tr><tr class="even"><td style="text-align: center;"><code>height</code></td><td style="text-align: center;">高度。默认 200 像素</td></tr><tr class="odd"><td style="text-align: center;"><code>min_font_size</code></td><td style="text-align: center;">指定词云中字体的最小字号。默认 4 号</td></tr><tr class="even"><td style="text-align: center;"><code>max_font_size</code></td><td style="text-align: center;">最大字号。</td></tr><tr class="odd"><td style="text-align: center;"><code>font_step</code></td><td style="text-align: center;">指定词云中字体字号的步进间隔。默认为1</td></tr><tr class="even"><td style="text-align: center;"><code>font_path</code></td><td style="text-align: center;">指定字体文件的路径，默认 None</td></tr><tr class="odd"><td style="text-align: center;"><code>max_words</code></td><td style="text-align: center;">指定词云显示的最大单词数量，默认200</td></tr><tr class="even"><td style="text-align: center;"><code>stop_words</code></td><td style="text-align: center;">指定词云的排除词，即不显示的单词, 例如<code>stop_words=&#123;"python", "world"&#125;</code></td></tr><tr class="odd"><td style="text-align: center;"><code>mask</code></td><td style="text-align: center;">指定词云形状。默认矩形</td></tr><tr class="even"><td style="text-align: center;"><code>background_color</code></td><td style="text-align: center;">指定背景颜色。默认黑色</td></tr></tbody></table></li></ul></li><li><p>两个方法</p><table><thead><tr class="header"><th style="text-align: center;">函数</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>w.generate(txt)</code></td><td style="text-align: center;">向词云对象 w 中加载 txt，txt是以空格分隔的字符串。<code>w.generate("Python and WordCloud")</code></td></tr><tr class="even"><td style="text-align: center;"><code>w.to_file(filename)</code></td><td style="text-align: center;">将词云输出为图像文件，<code>.png</code>或 <code>.jpg</code> 格式。<code>w.to_file("outfile.png")</code></td></tr></tbody></table></li></ol><h1 id="jieba-wordcloud-示例">jieba + wordcloud 示例</h1><ul><li>展示《沉默的羔羊》中出现最多的词及出现的次数</li><li>展示《沉默的羔羊》词云</li></ul><p>代码：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<span class="hljs-keyword">import</span> wordcloud<span class="hljs-comment"># 读取文件</span>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;沉默的羔羊.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)txt = file.read()file.close()<span class="hljs-comment"># jieba库分词，过滤单个字</span>ls_temp = jieba.lcut(txt)ls = []<span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> ls_temp:    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(word) &gt;= <span class="hljs-number">2</span>:        ls.append(word)<span class="hljs-comment"># 打印出现最多的词</span>d = &#123;&#125;<span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> ls:    d[word] = d.get(word,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span>lt = <span class="hljs-built_in">list</span>(d.items())lt.sort(key=<span class="hljs-keyword">lambda</span> ele:ele[<span class="hljs-number">1</span>],reverse=<span class="hljs-literal">True</span>)word,count = lt[<span class="hljs-number">0</span>]<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(word, count))<span class="hljs-comment"># 输出词云</span>Str = <span class="hljs-string">&quot; &quot;</span>.join(ls)w = wordcloud.WordCloud(width=<span class="hljs-number">1000</span>, height=<span class="hljs-number">700</span>, background_color=<span class="hljs-string">&quot;white&quot;</span>, \    font_path=<span class="hljs-string">&quot;msyh.ttc&quot;</span>)w.generate(Str)w.to_file(<span class="hljs-string">&quot;lambs.png&quot;</span>)</code></pre></div><p>输出结果：</p><div class="code-wrapper"><pre><code class="hljs">Building prefix dict from the default dictionary ...Dumping model to file cache C:\Users\莫临城\AppData\Local\Temp\jieba.cacheLoading model cost 1.535 seconds.Prefix dict has been built successfully.史达琳 701&lt;wordcloud.wordcloud.WordCloud at 0x212d626c1f0&gt;</code></pre></div><p>词云：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301261520093.png" /></p><blockquote><p>《沉默的羔羊》</p><blockquote><p>链接：<ahref="https://pan.baidu.com/s/1_YibOGIAL0oTtalBahP1tA?pwd=xby3">https://pan.baidu.com/s/1_YibOGIAL0oTtalBahP1tA?pwd=xby3</a>提取码：xby3</p></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础（七）：文件与数据格式化</title>
    <link href="/2023/01/26/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <url>/2023/01/26/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="文件和数据格式化">文件和数据格式化</h1><h2 id="文件">7.1 文件</h2><h3 id="文件类型">7.1.1 文件类型</h3><ol type="1"><li><p><strong>文件是数据的抽象和集合</strong></p></li><li><p>文件的展示方式</p><ul><li>本质上，文件都是二进制存储</li><li>形式上，文件有两种展示方式<ul><li>文本文件：由单一特定编码组成的文件，也被看成是存储的长字符串，例如txt 文件、.py 文件。</li><li>二进制文件：二进制 01 组成，没有统一字符编码，例如 .png 文件。</li></ul></li></ul></li></ol><h3 id="文件的打开与关闭">7.1.2 文件的打开与关闭</h3><ol type="1"><li><p>打开文件：</p><ul><li><p><code>open(filename, mode='r')</code>打开一个文件，并返回文件对象。</p><ul><li><code>filename</code>: 必需，文件路径（相对路径或绝对路径）。</li><li><code>mode</code>: 可选，文件打开模式</li></ul></li><li><p>文件打开模式（<code>mode</code> 参数）</p><table><thead><tr class="header"><th style="text-align: center;">参数</th><th style="text-align: center;">模式</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">"r"</td><td style="text-align: center;">只读模式（默认）</td></tr><tr class="even"><td style="text-align: center;">"w"</td><tdstyle="text-align: center;">覆盖写，文件不存在则创建，存在则覆盖</td></tr><tr class="odd"><td style="text-align: center;">"x"</td><tdstyle="text-align: center;">创建写，文件不存在则创建，存在则报错</td></tr><tr class="even"><td style="text-align: center;">"a"</td><tdstyle="text-align: center;">追加写，文件不存在则创建，存在则追加</td></tr><tr class="odd"><td style="text-align: center;">"t"</td><td style="text-align: center;">文本模式（默认）</td></tr><tr class="even"><td style="text-align: center;">"b"</td><td style="text-align: center;">二进制模式</td></tr><tr class="odd"><td style="text-align: center;">"+"</td><td style="text-align: center;">与 r/w/x/a一起使用，打开一个文件进行更新(可读可写)。</td></tr></tbody></table></li></ul></li><li><p>关闭文件：</p><ul><li><p><code>fileObject.close()</code> 关闭一个已打开的文件。</p><ul><li>关闭后的文件不能再进行读写操作，</li><li>没有参数，没有返回值</li></ul></li></ul><blockquote><p>python对文件的操作步骤：打开→操作→关闭</p><p>打开文件后采用 <code>close()</code> 关闭文件是一个好习惯。如果不调用<code>close()</code>，当前 Python程序完全运行退出时，该文件引用被释放，即程序退出时，相当于调用了<code>close()</code>。</p></blockquote></li></ol><h3 id="文件读取">7.1.3 文件读取</h3><table><thead><tr class="header"><th style="text-align: center;">函数</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>file.read(size=-1)</code></td><tdstyle="text-align: center;">读取<strong>所有</strong>，作为一个字符串。如果给定size 则读取前 size 长度。</td></tr><tr class="even"><td style="text-align: center;"><code>file.readline(size=-1)</code></td><td style="text-align: center;">读取<strong>整行</strong>，包括 ""，如果给定 size 则读取该行的前 size 长度。</td></tr><tr class="odd"><tdstyle="text-align: center;"><code>file.readlines(sizeint=-1)</code></td><tdstyle="text-align: center;">读取<strong>所有行</strong>，以每行为元素<strong>返回列表</strong>，如果给定sizeint 则读取前 sizeint 行。</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 实例</span><span class="hljs-comment"># 遍历全文本：方法一</span><span class="hljs-comment"># 特点：一次读入，统一处理</span>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;f1.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)txt = file.read()file.close()</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 遍历全文本，方法二</span><span class="hljs-comment"># 特点：按数量读入，逐步处理</span>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;f1.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)txt = file.read(<span class="hljs-number">5</span>)<span class="hljs-keyword">while</span> txt != <span class="hljs-string">&quot;&quot;</span>:    txt = file.read(<span class="hljs-number">5</span>)file.close()</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 逐行遍历：方法一</span>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;f1.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)ls = file.readlines()<span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> ls:    <span class="hljs-built_in">print</span>(line)file.close()<span class="hljs-built_in">print</span>(ls)</code></pre></div><div class="code-wrapper"><pre><code class="hljs">Who&#39;s there?hellopython[&quot;Who&#39;s there?\n&quot;, &#39;hello\n&#39;, &#39;python&#39;]  </code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 逐行遍历：方法二</span>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;f1.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)ls = []<span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:  <span class="hljs-comment"># 读取每行为一个字符串</span>    <span class="hljs-built_in">print</span>(line)    ls.append(line)file.close()<span class="hljs-built_in">print</span>(ls)</code></pre></div><div class="code-wrapper"><pre><code class="hljs">Who&#39;s there?hellopython[&quot;Who&#39;s there?\n&quot;, &#39;hello\n&#39;, &#39;python&#39;]</code></pre></div><h3 id="文件写入">7.1.4 文件写入</h3><table><thead><tr class="header"><th style="text-align: center;">函数</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>file.write(s)</code></td><td style="text-align: center;">将<strong>字符串</strong> s写入文件，返回写入的字符长度。</td></tr><tr class="even"><td style="text-align: center;"><code>file.writelines(lines)</code></td><tdstyle="text-align: center;">向文件写入一个<strong>字符串列表</strong>lines，如需换行则要自己加入每行的换行符。</td></tr><tr class="odd"><td style="text-align: center;"><code>file.tell()</code></td><td style="text-align: center;">返回文件指针的当前位置。</td></tr><tr class="even"><tdstyle="text-align: center;"><code>file.seek(offset[, whence])</code></td><td style="text-align: center;">将文件指针移动到指定位置。</td></tr></tbody></table><blockquote><p><code>file.seek(offset[, whence])</code></p><blockquote><p><code>offset</code> — 偏移量</p><p><code>whence</code> — 从文件哪个位置开始偏移（可选，默认为0）</p><ul><li>0 → 从文件开头开始，1 → 从文件当前位置开始，2 → 从文件结尾开始</li></ul></blockquote></blockquote><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># tell()与seek()</span>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;f1.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<span class="hljs-built_in">print</span>(file.tell())file.read(<span class="hljs-number">5</span>)<span class="hljs-built_in">print</span>(file.tell())file.seek(<span class="hljs-number">20</span>, <span class="hljs-number">1</span>)<span class="hljs-built_in">print</span>(file.tell())</code></pre></div><div class="code-wrapper"><pre><code class="hljs">0525</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 注意：Pyhon3 在文本文件中，如果没有使用 b 模式打开文件，</span><span class="hljs-comment"># 那么只允许从文件头开始计算相对位置，从其它位置开始就会引发异常。</span><span class="hljs-comment"># io.UnsupportedOperation: can&#x27;t do nonzero cur-relative seeks</span>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;f1.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)file.read(<span class="hljs-number">5</span>)<span class="hljs-built_in">print</span>(file.tell())file.seek(<span class="hljs-number">20</span>, <span class="hljs-number">1</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs">525</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 实例</span><span class="hljs-comment"># 数据写入到文件的操作</span>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;f1.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>)ls = [<span class="hljs-string">&quot;Who&#x27;s there?\n&quot;</span>, <span class="hljs-string">&quot;hello\n&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>]file.writelines(ls)<span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:    <span class="hljs-built_in">print</span>(line)file.close()<span class="hljs-comment"># 没有任何输出</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 修改代码</span>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;f1.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>)ls = [<span class="hljs-string">&quot;Who&#x27;s there?\n&quot;</span>, <span class="hljs-string">&quot;hello\n&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>]file.writelines(ls)<span class="hljs-built_in">print</span>(file.tell())file.seek(<span class="hljs-number">0</span>) <span class="hljs-comment"># 文件指针回到文件头</span><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:    <span class="hljs-built_in">print</span>(line, end=<span class="hljs-string">&quot;&quot;</span>)  <span class="hljs-comment"># 读取一行会将末尾换行符也读取</span>file.close()</code></pre></div><div class="code-wrapper"><pre><code class="hljs">27Who&#39;s there?hellopython</code></pre></div><h2 id="一维数据的格式化和处理">7.2 一维数据的格式化和处理</h2><ol type="1"><li><p>数据组织的维度</p><ul><li>一维数据：由对等关系的有序或无序数据构成，采用线性方式组织，例如<strong>集合、列表</strong></li><li>二维数据：一维数据的组合形式</li><li>多维数据：由一维或二维数据在新维度的扩展</li><li>高维数据：仅利用最基本的二元关系展示数据的复杂结构，例如<strong>字典</strong></li></ul></li><li><p>一维数据的表示</p><ul><li>数据有序：列表</li><li>数据无序：集合</li></ul></li><li><p>一维数据的存储</p><ul><li>方式一：<strong>空格分隔</strong>进行存储，不换行。缺点：数据中不能有空格</li><li>方式二：<strong>逗号分隔</strong>进行存储，不换行。缺点：数据中不能有逗号</li><li>其他方式：特殊符号或符号组合</li></ul></li><li><p>一维数据的处理：指的是<strong>表示方式与存储方式的相互转换</strong></p></li></ol><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 1.从空格分隔的文件读取数据</span>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data1.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)txt = file.read()ls = txt.split()file.close()ls</code></pre></div><div class="code-wrapper"><pre><code class="hljs">[&#39;Thu&#39;, &#39;Nov&#39;, &#39;17&#39;, &#39;15:13:13&#39;, &#39;2022&#39;]</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 2.采用空格分隔方式将数据写入文件</span>txt = <span class="hljs-string">&quot; &quot;</span>.join(ls)file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data1.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)file.write(txt)file.close()</code></pre></div><h2 id="二维数据的格式化和处理">7.3 二维数据的格式化和处理</h2><ol type="1"><li><p>二维数据的表示</p><ul><li>基本方式：二维列表</li></ul></li><li><p>CSV格式与二维数据的存储</p><ol type="1"><li><p><strong>逗号分隔值</strong>（Comma-SeparatedValues，<strong>CSV</strong>）：通用的一二维数据存储格式，<code>.csv</code>扩展名</p><ul><li>每行一个一维数据，采用逗号分隔，无空行</li><li>如果某个元素缺失，逗号仍要保留</li><li>英文半角逗号，逗号与数据之间无额外空格</li><li>暂时不考虑数据中出现逗号的情况（加引号、转义符）</li></ul></li><li><p>二维数据的存储：一般索引习惯为<strong>ls[row][column]</strong></p></li></ol></li><li><p>二维数据的处理</p><ul><li>Python 提供了一个读写 csv 的标准库，可以通过 <code>import csv</code>使用。csv 库包含操作 CSV 格式最基本的功能，csv.reader 和csv.writer().</li><li>由于 CSV 格式十分简单，对于一般程序来说，建议程序员自己编写操作 CSV格式的函数，这样更灵活和个性化。</li><li>对于需要运行在复杂环境或商业使用的程序，建议采用 csv 标准库。</li></ul></li></ol><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 从CSV格式的文件读取数据</span>ls = []file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sample1.csv&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:    line = line.replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    lt = line.split(<span class="hljs-string">&quot;,&quot;</span>)    ls.append(lt)file.close()<span class="hljs-comment"># 打印</span><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ls:    <span class="hljs-built_in">print</span>(item)</code></pre></div><div class="code-wrapper"><pre><code class="hljs">[&#39;&quot;Month&quot;&#39;, &#39;&quot;Average&quot;&#39;, &#39;&quot;2005&quot;&#39;, &#39;&quot;2006&quot;&#39;, &#39;&quot;2007&quot;&#39;, &#39;&quot;2008&quot;&#39;, &#39;&quot;2009&quot;&#39;, &#39;&quot;2010&quot;&#39;, &#39;&quot;2011&quot;&#39;, &#39;&quot;2012&quot;&#39;, &#39;&quot;2013&quot;&#39;, &#39;&quot;2014&quot;&#39;, &#39;&quot;2015&quot;&#39;][&#39;&quot;May&quot;&#39;, &#39;0.1&#39;, &#39;0&#39;, &#39;0&#39;, &#39;1&#39;, &#39;1&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;, &#39;2&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;][&#39;&quot;Jun&quot;&#39;, &#39;0.5&#39;, &#39;2&#39;, &#39;1&#39;, &#39;1&#39;, &#39;0&#39;, &#39;0&#39;, &#39;1&#39;, &#39;1&#39;, &#39;2&#39;, &#39;2&#39;, &#39;0&#39;, &#39;1&#39;][&#39;&quot;Jul&quot;&#39;, &#39;0.7&#39;, &#39;5&#39;, &#39;1&#39;, &#39;1&#39;, &#39;2&#39;, &#39;0&#39;, &#39;1&#39;, &#39;3&#39;, &#39;0&#39;, &#39;2&#39;, &#39;2&#39;, &#39;1&#39;][&#39;&quot;Aug&quot;&#39;, &#39;2.3&#39;, &#39;6&#39;, &#39;3&#39;, &#39;2&#39;, &#39;4&#39;, &#39;4&#39;, &#39;4&#39;, &#39;7&#39;, &#39;8&#39;, &#39;2&#39;, &#39;2&#39;, &#39;3&#39;][&#39;&quot;Sep&quot;&#39;, &#39;3.5&#39;, &#39;6&#39;, &#39;4&#39;, &#39;7&#39;, &#39;4&#39;, &#39;2&#39;, &#39;8&#39;, &#39;5&#39;, &#39;2&#39;, &#39;5&#39;, &#39;2&#39;, &#39;5&#39;][&#39;&quot;Oct&quot;&#39;, &#39;2.0&#39;, &#39;8&#39;, &#39;0&#39;, &#39;1&#39;, &#39;3&#39;, &#39;2&#39;, &#39;5&#39;, &#39;1&#39;, &#39;5&#39;, &#39;2&#39;, &#39;3&#39;, &#39;0&#39;][&#39;&quot;Nov&quot;&#39;, &#39;0.5&#39;, &#39;3&#39;, &#39;0&#39;, &#39;0&#39;, &#39;1&#39;, &#39;1&#39;, &#39;0&#39;, &#39;1&#39;, &#39;0&#39;, &#39;1&#39;, &#39;0&#39;, &#39;1&#39;][&#39;&quot;Dec&quot;&#39;, &#39;0.0&#39;, &#39;1&#39;, &#39;0&#39;, &#39;1&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;, &#39;0&#39;, &#39;1&#39;]</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 将二维数据写入CSV格式文件</span>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sample1.csv&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ls:    file.write(<span class="hljs-string">&quot;,&quot;</span>.join(item) + <span class="hljs-string">&quot;\n&quot;</span>)file.close()</code></pre></div><blockquote><p>代码中用到的文件：</p><p>链接：<ahref="https://pan.baidu.com/s/1yQ5a3NQS8LxYagRyQSvs1A?pwd=c31g">https://pan.baidu.com/s/1yQ5a3NQS8LxYagRyQSvs1A?pwd=c31g</a>提取码：c31g</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础（六）：组合数据类型II</title>
    <link href="/2023/01/26/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8BII/"/>
    <url>/2023/01/26/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8BII/</url>
    
    <content type="html"><![CDATA[<h1id="python中的可变对象与不可变对象">Python中的可变对象与不可变对象</h1><p>在 python中，<strong>字符串</strong>，<strong>元组</strong>和<strong>数字</strong>类型是不可更改的对象，而<strong>列表</strong>、<strong>字典</strong>等则是可以修改的对象。</p><h2 id="字符串">字符串</h2><ul><li><p>举例</p><p><div class="code-wrapper"><pre><code class="hljs python">string = <span class="hljs-string">&quot;abcd&quot;</span><span class="hljs-built_in">print</span>(string)string[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;f&quot;</span></code></pre></div></p></li><li><p>输出结果</p><p><div class="code-wrapper"><pre><code class="hljs vim">abcd   ---------------------------------------------------------------------------TypeError                                 Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>)~\AppData\Local\Temp\ipykernel_17616\<span class="hljs-number">1561895390</span>.<span class="hljs-keyword">py</span> in &lt;cell <span class="hljs-built_in">line</span>: <span class="hljs-number">3</span>&gt;()      <span class="hljs-number">1</span> <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;abcd&quot;</span>      <span class="hljs-number">2</span> <span class="hljs-keyword">print</span>(<span class="hljs-built_in">string</span>)----&gt; <span class="hljs-number">3</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;f&quot;</span>TypeError: <span class="hljs-string">&#x27;str&#x27;</span> object does not support item assignment</code></pre></div></p></li></ul><h2 id="元组">元组</h2><ul><li><p>举例</p><p><div class="code-wrapper"><pre><code class="hljs python">tup1 = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;python&quot;</span><span class="hljs-built_in">print</span>(tup1)tup1[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;hello&quot;</span></code></pre></div></p></li><li><p>输出结果</p><p><div class="code-wrapper"><pre><code class="hljs pgsql">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;python&#x27;</span>)  <span class="hljs-comment">---------------------------------------------------------------------------</span>TypeError                                 Traceback (most recent <span class="hljs-keyword">call</span> last)~\AppData\<span class="hljs-keyword">Local</span>\<span class="hljs-keyword">Temp</span>\ipykernel_17616\<span class="hljs-number">737283433.</span>py <span class="hljs-keyword">in</span> &lt;cell <span class="hljs-type">line</span>: <span class="hljs-number">3</span>&gt;()      <span class="hljs-number">1</span> tup1 = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, &quot;a&quot;, &quot;python&quot;      <span class="hljs-number">2</span> print(tup1)<span class="hljs-comment">----&gt; 3 tup1[2] = &quot;hello&quot;</span>TypeError: <span class="hljs-string">&#x27;tuple&#x27;</span> <span class="hljs-keyword">object</span> does <span class="hljs-keyword">not</span> support item assignment</code></pre></div></p></li></ul><h1 id="几种组合数据类型的操作">几种组合数据类型的操作</h1><h2 id="一集合操作">一、集合操作</h2><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 创建集合</span>thisset = <span class="hljs-built_in">set</span>((<span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-string">&quot;Taobao&quot;</span>))</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 添加元素</span>thisset.update([<span class="hljs-number">10</span>, <span class="hljs-number">2</span>], &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;, (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>))thisset.add(<span class="hljs-string">&quot;python&quot;</span>)  <span class="hljs-comment"># set.add() takes exactly one argument</span>thisset</code></pre></div><div class="code-wrapper"><pre><code class="hljs">&#123;10, 2, 3, 4, 5, 6, &#39;Google&#39;, &#39;Runoob&#39;, &#39;Taobao&#39;, &#39;python&#39;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 删除元素</span>thisset.remove(<span class="hljs-string">&quot;Taobao&quot;</span>)  <span class="hljs-comment"># 不存在会发生错误</span>thisset.discard(<span class="hljs-string">&quot;Facebook&quot;</span>)  <span class="hljs-comment"># 不存在不会发生错误</span><span class="hljs-built_in">print</span>(thisset)thisset.pop()</code></pre></div><div class="code-wrapper"><pre><code class="hljs">&#123;2, 3, 4, 5, 6, 10, &#39;Google&#39;, &#39;python&#39;, &#39;Runoob&#39;&#125;2</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 判断元素是否在集合中</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;python&quot;</span> <span class="hljs-keyword">in</span> thisset)</code></pre></div><div class="code-wrapper"><pre><code class="hljs">True</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 拷贝集合</span>thisset.copy()</code></pre></div><div class="code-wrapper"><pre><code class="hljs">&#123;10, 3, 4, 5, 6, &#39;Google&#39;, &#39;Runoob&#39;, &#39;python&#39;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 清空集合</span>thisset.clear()thisset</code></pre></div><div class="code-wrapper"><pre><code class="hljs">set()</code></pre></div><div class="code-wrapper"><pre><code class="hljs python">ls = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]s = <span class="hljs-built_in">set</span>(ls)s</code></pre></div><div class="code-wrapper"><pre><code class="hljs">&#123;1, 2, 3&#125;</code></pre></div><h2 id="二元组操作">二、元组操作</h2><div class="code-wrapper"><pre><code class="hljs python">tup = <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&quot;</span>, (<span class="hljs-number">4</span>, <span class="hljs-string">&quot;world&quot;</span>, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 可以不加括号</span><span class="hljs-built_in">print</span>(tup)tup[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>]  <span class="hljs-comment"># 下标访问</span><span class="hljs-built_in">print</span>(tup.count(<span class="hljs-number">3</span>))<span class="hljs-built_in">print</span>(tup.index((<span class="hljs-number">4</span>, <span class="hljs-string">&quot;world&quot;</span>, <span class="hljs-number">10</span>)))</code></pre></div><div class="code-wrapper"><pre><code class="hljs">(1, 3, &#39;a&#39;, (4, &#39;world&#39;, 10))13</code></pre></div><h2 id="三列表操作">三、列表操作</h2><div class="code-wrapper"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Runoob&#x27;</span>, <span class="hljs-number">1997</span>, <span class="hljs-number">2000</span>]</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 更新列表</span>list1[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Taobao&quot;</span>  <span class="hljs-comment"># 替换</span>list1.append(<span class="hljs-number">2022</span>)  <span class="hljs-comment"># 追加</span>list1.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;start&quot;</span>)  <span class="hljs-comment"># 指定位置插入</span>list1</code></pre></div><div class="code-wrapper"><pre><code class="hljs">[&#39;start&#39;, &#39;Google&#39;, &#39;Taobao&#39;, 1997, 2000, 2022]</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 删除元素</span><span class="hljs-keyword">del</span> list1[<span class="hljs-number">3</span>]list1.remove(<span class="hljs-number">2000</span>)  <span class="hljs-comment"># 删除第一个匹配值</span>list1.pop(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 指定下标删除</span>list1</code></pre></div><div class="code-wrapper"><pre><code class="hljs">[&#39;start&#39;, &#39;Taobao&#39;, 2022]</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 反转列表</span>list1.reverse()</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 拷贝</span>list2 = list1.copy()list2</code></pre></div><div class="code-wrapper"><pre><code class="hljs">[2022, &#39;Taobao&#39;, &#39;start&#39;]</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 排序</span>list3 = [[<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">3</span>], [<span class="hljs-string">&quot;hel&quot;</span>, <span class="hljs-number">5</span>], [<span class="hljs-string">&quot;back&quot;</span>, <span class="hljs-number">1</span>], [<span class="hljs-string">&quot;white&quot;</span>, <span class="hljs-number">11</span>]]list3.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)list3</code></pre></div><div class="code-wrapper"><pre><code class="hljs">[[&#39;white&#39;, 11], [&#39;hel&#39;, 5], [&#39;a&#39;, 3], [&#39;back&#39;, 1]]</code></pre></div><blockquote><p><strong>List sort() 方法</strong></p><ul><li><code>sort()</code>函数用于对原列表进行排序，<code>list.sort( key=None, reverse=False)</code><ul><li><code>key</code> ——主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li><code>reverse</code> —— 排序规则，<strong>reverse =True</strong> 降序， <strong>reverse =False</strong> 升序（默认）。</li></ul></li><li>可以根据元素的固有属性进行排序，如：第N个元素。借助 <strong>lambda</strong>表达式：<ul><li><code>list.sort(key=lambda ele:ele[1]) # 根据第2个元素排序</code></li></ul></li></ul></blockquote><h2 id="四字典操作">四、字典操作</h2><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 创建字典</span>d = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;luminous&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">22</span>, <span class="hljs-string">&quot;site&quot;</span>: <span class="hljs-string">&quot;xi&#x27;an&quot;</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">170</span>&#125;<span class="hljs-comment"># 访问键值</span>Name = d[<span class="hljs-string">&quot;name&quot;</span>]Age = d.get(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">0</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Name:&#123;&#125; , Age:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(Name, Age))d[<span class="hljs-string">&quot;site&quot;</span>] = <span class="hljs-string">&quot;lanzhou&quot;</span>  <span class="hljs-comment"># 修改键值</span>d[<span class="hljs-string">&quot;other&quot;</span>] = <span class="hljs-number">111</span>  <span class="hljs-comment"># 添加键值对</span>d</code></pre></div><div class="code-wrapper"><pre><code class="hljs">Name:luminous , Age:22&#123;&#39;name&#39;: &#39;luminous&#39;, &#39;age&#39;: 22, &#39;site&#39;: &#39;lanzhou&#39;, &#39;height&#39;: 170, &#39;other&#39;: 111&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 删除键值对</span><span class="hljs-keyword">del</span> d[<span class="hljs-string">&quot;height&quot;</span>]<span class="hljs-built_in">print</span>(d.pop(<span class="hljs-string">&quot;other&quot;</span>, <span class="hljs-number">100</span>))  <span class="hljs-comment"># 删除键值对，返回删除的值，若键不存在，返回默认值100</span><span class="hljs-built_in">print</span>(d)d.popitem()  <span class="hljs-comment"># 删除最后一对键值（python3.9）</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs">111&#123;&#39;name&#39;: &#39;luminous&#39;, &#39;age&#39;: 22, &#39;site&#39;: &#39;lanzhou&#39;&#125;(&#39;site&#39;, &#39;lanzhou&#39;)</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 返回视图对象</span>keys = d.keys()values = d.values()items = d.items()<span class="hljs-built_in">print</span>(items)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;keys : &#123;&#125;\nvalues : &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">list</span>(keys),                                      <span class="hljs-built_in">list</span>(values)))  <span class="hljs-comment"># 使用list()转换为列表</span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(items))  <span class="hljs-comment"># 使用list()转换为列表</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs">dict_items([(&#39;name&#39;, &#39;luminous&#39;), (&#39;age&#39;, 22)])keys : [&#39;name&#39;, &#39;age&#39;]values : [&#39;luminous&#39;, 22][(&#39;name&#39;, &#39;luminous&#39;), (&#39;age&#39;, 22)]</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 视图对象是动态的，删除字典的 key，视图对象转为列表后也跟着变化</span><span class="hljs-keyword">del</span> d[<span class="hljs-string">&quot;name&quot;</span>]<span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(items))  <span class="hljs-comment"># 使用list()转换为列表</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs">[(&#39;age&#39;, 22)]</code></pre></div><div class="code-wrapper"><pre><code class="hljs python">d.clear()  <span class="hljs-comment"># 清空字典</span>d</code></pre></div><div class="code-wrapper"><pre><code class="hljs">&#123;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 注意：若将字典直接转换为列表，结果如下：</span>d = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;luminous&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">22</span>, <span class="hljs-string">&quot;site&quot;</span>: <span class="hljs-string">&quot;xi&#x27;an&quot;</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">170</span>&#125;<span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(d))</code></pre></div><div class="code-wrapper"><pre><code class="hljs">[&#39;name&#39;, &#39;age&#39;, &#39;site&#39;, &#39;height&#39;]</code></pre></div><blockquote><p>字典 <strong>items() 方法</strong> 以列表返回视图对象，是一个可遍历的key/value 对。</p><ul><li><p><code>dict.keys()</code>、<code>dict.values()</code> 和<code>dict.items()</code> 返回的都是<strong>视图对象</strong>（ viewobjects），提供了字典实体的动态视图，意味着字典改变，视图也会跟着变化。</p></li><li><p>视图对象不是列表，不支持索引，可以使用 <code>list()</code>来转换为列表。</p></li><li><p>字典的视图对象都是<strong>只读</strong>的，不能对视图对象进行任何的修改。</p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础（五）：组合数据类型I</title>
    <link href="/2023/01/25/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8BI/"/>
    <url>/2023/01/25/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8BI/</url>
    
    <content type="html"><![CDATA[<h1 id="种主流的组合数据类型">3种主流的组合数据类型</h1><h2 id="一集合">一、集合</h2><h3 id="定义">定义</h3><ul><li><p>与数学的集合概念一致：<strong>确定性、互异性、无序性</strong></p></li><li><p>创建集合：使用 <code>&#123;&#125;</code> 或者 <code>set()</code></p><blockquote><p>注意：创建一个空集合使用 <code>set()</code> 而不是<code>&#123;&#125;</code>，因为 <code>&#123;&#125;</code> 用来创建一个空字典。</p></blockquote></li></ul><h3 id="操作符">操作符</h3><ul><li>并 <code>a | b</code>、交 <code>a &amp; b</code>、差<code>a - b</code>、补 <code>a ^ b</code></li><li><code>a &lt;= b</code> 或 <code>a &lt; b</code>：判断 a 和 b的子集关系，返回 <code>Ture/False</code></li><li><code>a &gt;= b</code> 或 <code>a &gt; b</code>：判断 a 和 b的包含关系，返回 <code>Ture/False</code></li><li>增强操作符：<code>a |= b</code>、<code>a &amp;= b</code>、<code>a -= b</code>、<code>a ^= b</code></li></ul><h3 id="集合操作">集合操作</h3><blockquote><p>集合元素不可更改。</p></blockquote><ol type="1"><li><p>添加元素</p><ul><li><p><code>s.add(x)</code></p><blockquote><p>将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。</p></blockquote></li><li><p><code>s.update(x)</code></p><blockquote><p>添加元素，参数 x 可以是列表，元组，字典等。</p><p>x 可以有多个，用逗号分开。</p></blockquote></li></ul></li><li><p>移除元素</p><ul><li><p><code>s.remove(x)</code></p><blockquote><p>将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误<code>KeyError</code>。</p></blockquote></li><li><p><code>s.discard(x)</code></p><blockquote><p>移除集合中的元素，且如果元素不存在，不会发生错误。</p></blockquote></li><li><p><code>s.pop()</code></p><blockquote><p>随机删除集合中的一个元素。</p><p>集合的 pop方法会对集合进行无序的排列，然后将这个无序排列集合的左面第一个元素进行删除。</p></blockquote></li></ul></li><li><p>清空集合：<code>s.clear()</code></p></li><li><p>得到集合元素个数：<code>len(s)</code></p></li><li><p>判断元素是否在集合中</p><ul><li><p><code>x in s</code></p><blockquote><p>判断元素 x 是否在集合 s 中，存在返回 True，不存在返回 False。</p></blockquote></li><li><p><code>x not in s</code></p></li></ul></li><li><p>其它</p><ul><li><code>s.copy()</code>：拷贝一个集合。返回拷贝的集合。</li></ul></li></ol><h3 id="应用场景数据去重">应用场景：数据去重</h3><h2 id="二序列">二、序列</h2><h3 id="定义-1">定义</h3><ul><li>有<strong>先后顺序</strong>的一组元素，元素可以<strong>重复</strong>，元素<strong>类型可以不同</strong></li><li>通过<strong>下标索引</strong>访问元素</li></ul><h3 id="通用操作符">通用操作符</h3><ul><li><code>x in s</code>、<code>x not in s</code></li><li><code>s+t</code></li><li><code>s*n</code> 或 <code>n*s</code></li><li><code>s[i]</code>、<code>s[i:j]</code> 或 <code>s[i:j:k]</code></li></ul><h3 id="通用函数与方法">通用函数与方法</h3><ul><li><p><code>len(s)</code></p></li><li><p><code>min(s)</code>、<code>max(s)</code></p></li><li><p><code>s.index(x)</code> 或 <code>s.index(x,i,j)</code></p></li><li><p><code>s.count(x)</code></p><blockquote><ol type="1"><li><p><code>min(s)/max(s)</code> 返回序列 s 中的最小/最大元素，要求 s中的元素可比较</p></li><li><p><code>s.index(x,i,j)</code> 返回序列 s 从 i 到 j-1 第一次出现 x的位置</p></li></ol></blockquote></li></ul><h3 id="序列是基类父类">序列是基类(父类)</h3><blockquote><p>Python 有 6 个序列的扩展类型，最常见的是<strong>字符串、列表和元组</strong>。</p></blockquote><ol type="1"><li><p>字符串</p><ul><li>Python 不支持单字符类型，单字符在 Python中也是作为一个字符串使用。</li><li>字符串是<strong>不可变对象</strong></li></ul></li><li><p>元组</p><ul><li><p>元组是<strong>不可变对象</strong>：一旦创建不可修改</p></li><li><p>创建元组：使用小括号 <code>()</code> 或 <code>tuple()</code>创建，元素间用逗号分隔</p><blockquote><p>可以不使用小括号：<code>tup3 = "a", "b", "c", "d"</code></p></blockquote></li><li><p>元组操作</p><ul><li>元组<strong>继承</strong>了序列类型的全部通用操作</li><li>元组因为创建后不能修改，因此<strong>没有特殊操作</strong></li></ul></li></ul></li><li><p>列表</p><ul><li><p>列表是<strong>可变对象</strong>：元素可以随意修改</p></li><li><p>创建列表：使用方括号 <code>[]</code> 或 <code>list()</code>创建，元素间用逗号分隔</p></li><li><p>列表操作</p><ul><li><p>列表<strong>继承</strong>了序列类型的全部通用操作</p></li><li><p>更新列表</p><ul><li><p><code>ls[i] = x</code>、<code>ls[i:j:k]=lt</code></p><blockquote><ol type="1"><li><p>替换列表 ls 第 i 元素为 x</p></li><li><p>用列表 lt 替换 ls 切片后所对应元素子列表</p></li></ol></blockquote></li><li><p><code>ls.append(x)</code>：在列表末尾添加新的对象 x。</p></li><li><p><code>ls.insert(i,x)</code>：将指定对象 x 插入列表的指定位置i。</p></li></ul></li><li><p>删除列表元素</p><ul><li><p><code>del ls[i]</code>、<code>del ls[i:j:k]</code></p><blockquote><ol type="1"><li><p>删除列表 ls 中第 i 元素</p></li><li><p>删除列表 ls 中第 i 到 j-1 以 k 为步长的元素</p></li></ol></blockquote></li><li><p><code>ls.remove(x)</code>：移除列表中某个值 x的第一个匹配项。</p></li><li><p><code>ls.pop([index=-1])</code></p><blockquote><ol type="1"><li><p>移除列表中的一个元素，并且返回该元素的值。</p></li><li><p><code>index</code> ——可选参数，要移除列表元素的索引值，不能超过列表总长度，默认为<code>index=-1</code>，删除最后一个列表值。</p></li></ol></blockquote></li></ul></li><li><p>排序：<code>ls.sort()</code></p></li><li><p>其它</p><ul><li><p><code>ls.clear()</code>：清空列表，类似于<code>del ls[:]</code></p></li><li><p><code>ls.reverse()</code>：反转列表</p></li><li><p><code>ls.copy()</code>：复制列表</p><blockquote><p><code>list2 = list1.copy()</code></p></blockquote></li></ul></li></ul></li></ul></li></ol><h3 id="序列应用场景">序列应用场景</h3><ul><li>元组用于元素不改变的应用场景，更多用于固定搭配场景</li><li>列表更加灵活，它是最常用的序列类型</li></ul><h2 id="三字典">三、字典</h2><h3 id="定义-2">定义</h3><ol type="1"><li><p>字典是一种<strong>可变容器</strong>模型，可存储任意类型对象。</p></li><li><p>采用大括号 <code>&#123;&#125;</code> 和内建函数 <code>dict()</code><strong>创建字典</strong></p><blockquote><p>使用大括号 <code>&#123;&#125;</code> 创建空字典</p></blockquote></li><li><p>字典的每个<strong>键值对</strong>用冒号 <code>:</code>分割，每个对之间用逗号 <code>,</code> 分割</p><blockquote><p><code>d = &#123;key1:value1, key2:value2, key3:value3&#125;</code></p></blockquote></li><li><p><strong>键</strong>的特性</p><blockquote><p>值可以取任意数据类型，可以重复。</p></blockquote><ul><li><p>键必须是<strong>唯一的</strong></p><blockquote><p>创建时如果同一个键被赋值两次，后一个值会被记住。</p></blockquote></li><li><p>键必须<strong>不可变</strong></p><blockquote><p>可以用<em>数字，字符串或元组</em>充当，而用列表就不行</p></blockquote></li></ul></li></ol><h3 id="字典操作">字典操作</h3><ol type="1"><li><p>访问</p><ul><li><p><strong>键</strong>就是值的<strong>索引</strong>，通过键获取值：<code>&lt;值&gt; = &lt;字典变量&gt;[&lt;键&gt;]</code>​</p><blockquote><p>键不在字典中时，会触发 <code>KeyError</code> 异常。</p></blockquote></li><li><p><code>d.get(k,&lt;default&gt;)</code></p><blockquote><p>若<strong>键 k 存在</strong>，则<strong>返回键 k的值</strong>，键不在则返回 <code>&lt;default&gt;</code> 值（默认<code>default=None</code>）。</p></blockquote></li></ul></li><li><p>修改</p><ul><li>修改值：<code>&lt;字典变量&gt;[&lt;键&gt;] = &lt;新的值&gt;</code></li><li>添加键值对：<code>&lt;字典变量&gt;[&lt;新的键&gt;] = &lt;新的值&gt;</code></li></ul></li><li><p>删除</p><ul><li><p>删除键值对</p><ul><li><p><code>del &lt;字典变量&gt;[&lt;键&gt;]</code></p></li><li><p><code>d.pop(k,&lt;default&gt;)</code></p><blockquote><ol type="1"><li><p>若<strong>键 k存在</strong>，<strong>删除</strong>键所对应的值，<strong>返回被删除的值</strong>，键不在则返回<code>&lt;default&gt;</code> 值。</p></li><li><p>若<strong>默认值 default 没有指定</strong> ，则触发<code>KeyError</code> 异常</p></li></ol></blockquote></li><li><p><code>d.popitem()</code></p><blockquote><ol type="1"><li><p>在 Python3.7 之前，<code>popitem()</code>方法删除并返回任意插入字典的键值对。</p></li><li><p>在 Python3.7 之后，<code>popitem()</code>方法删除并返回字典中的最后一对键和值。</p></li></ol></blockquote></li></ul></li><li><p>删除字典：<code>del &lt;字典变量&gt;</code></p><blockquote><p>执行 del 操作删除字典后，字典不再存在</p></blockquote></li><li><p>清空字典：<code>&lt;字典变量&gt;.clear()</code></p></li></ul></li><li><p>其它操作</p><ul><li><p><code>len(d)</code></p></li><li><p><code>k in d</code>：判断键 k 是否在字典 d 中，如果在返回True，否则 False</p></li><li><p><code>d.keys()</code>、<code>d.values()</code>、<code>d.items()</code></p><blockquote><p>返回字典d中所有的键信息、值信息、键值对信息</p></blockquote></li></ul></li></ol><h3 id="应用场景">应用场景</h3><h1 id="组合数据类型转换">组合数据类型转换</h1><ul><li><p>转换函数：</p><ul><li><code>set()</code></li><li><code>tuple()</code></li><li><code>list()</code></li></ul></li></ul><h1 id="思维导图">思维导图</h1><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301252103963.png" /></p>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 与 Packages（四）：PyInstaller库</title>
    <link href="/2023/01/25/Python-%E4%B8%8E-Packages%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9APyInstaller%E5%BA%93/"/>
    <url>/2023/01/25/Python-%E4%B8%8E-Packages%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9APyInstaller%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1id="pyinstaller库第三方库"><strong>PyInstaller</strong>库(第三方库)</h1><ul><li><p>主页：<ahref="https://pyinstaller.org/">https://pyinstaller.org/</a></p></li><li><p>PyInstaller 将 Python应用程序及其所有依赖项捆绑到一个包中。用户可以在不安装 Python解释器或任何模块的情况下运行打包的应用程序。</p></li><li><p>PyInstaller 支持 Python 3.7 及更新版本，并正确地捆绑了许多主要的Python 包，如 numpy、matplotlib、PyQt、wxPython 等。</p></li><li><p>PyInstaller 在 Windows、MacOS X 和 Linux 上进行了测试。</p></li></ul><h1 id="常用参数">常用参数：</h1><table><thead><tr class="header"><th><code>-h</code>, <code>--help</code></th><th>显示帮助消息</th></tr></thead><tbody><tr class="odd"><td><code>--clean</code></td><td>清理 Py 安装程序缓存并删除临时文件。</td></tr><tr class="even"><td><code>-D</code>, <code>--onedir</code></td><td>创建包含可执行文件的文件夹（默认）</td></tr><tr class="odd"><td><code>-F</code>, <code>--onefile</code></td><td>创建一个文件捆绑的可执行文件（单个程序）。</td></tr><tr class="even"><td><code>-i &lt;FILE.ico&gt;</code></td><td>将图标应用于可执行文件</td></tr></tbody></table><h1 id="tips">Tips</h1><ol type="1"><li><p>pyinstaller 库-帮助文档</p><p><a href="https://pyinstaller.org/en/stable/usage.html">UsingPyInstaller</a></p></li><li><p>递归函数应用 I：绘制 n 阶科赫曲线</p><ul><li><p>递归函数：</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 绘制n阶科赫曲线</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">koch</span>(<span class="hljs-params">lenth,n</span>):    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:        t.pencolor(r.choice(<span class="hljs-built_in">str</span>))        t.fd(lenth)    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,-<span class="hljs-number">120</span>,<span class="hljs-number">60</span>]:            t.left(i)            koch(lenth/<span class="hljs-number">3</span>,n-<span class="hljs-number">1</span>)</code></pre></div></p></li><li><p>源代码：</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle <span class="hljs-keyword">as</span> t<span class="hljs-keyword">import</span> random <span class="hljs-keyword">as</span> r<span class="hljs-built_in">str</span> = [<span class="hljs-string">&quot;LightSkyBlue&quot;</span>,<span class="hljs-string">&quot;DeepSkyBlue&quot;</span>,<span class="hljs-string">&quot;Cyan&quot;</span>,<span class="hljs-string">&quot;Turquoise&quot;</span>]<span class="hljs-comment"># 绘制n阶科赫曲线</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">koch</span>(<span class="hljs-params">lenth,n</span>):    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:        t.pencolor(r.choice(<span class="hljs-built_in">str</span>))        t.fd(lenth)    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,-<span class="hljs-number">120</span>,<span class="hljs-number">60</span>]:            t.left(i)            koch(lenth/<span class="hljs-number">3</span>,n-<span class="hljs-number">1</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    level = <span class="hljs-number">4</span>    lenth = <span class="hljs-number">450</span>    t.setup(<span class="hljs-number">800</span>,<span class="hljs-number">600</span>)    t.pu()    t.goto(-<span class="hljs-number">225</span>,<span class="hljs-number">125</span>)    t.pd()    t.width(<span class="hljs-number">2</span>)    t.speed(<span class="hljs-number">10</span>)    <span class="hljs-comment"># 科赫雪花</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):        koch(lenth,level)        t.right(<span class="hljs-number">120</span>)    t.hideturtle()    t.done()<span class="hljs-comment"># 执行</span>main()</code></pre></div></p></li><li><p>运行结果：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301241505494.JPG" /></p></li></ul></li><li><p>递归函数应用 II：汉诺塔</p><ul><li><p>源代码：</p><p><div class="code-wrapper"><pre><code class="hljs python">step = <span class="hljs-number">0</span><span class="hljs-comment"># 把N个盘子从src搬到des，mid作为辅助</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">hanoi</span>(<span class="hljs-params">src, des, mid, N</span>):    <span class="hljs-keyword">global</span> step <span class="hljs-comment"># 声明step使用全局变量</span>    <span class="hljs-keyword">if</span> N == <span class="hljs-number">1</span>: <span class="hljs-comment"># 基例</span>        step += <span class="hljs-number">1</span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;step&#123;:&gt;3&#125;: &#123;&#125; &#123;&#125;-&gt;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(step,<span class="hljs-number">1</span>,src,des)) <span class="hljs-comment"># 直接从src搬到des</span>    <span class="hljs-keyword">else</span>:        hanoi(src,mid,des,N-<span class="hljs-number">1</span>) <span class="hljs-comment"># 先把N-1个从src搬到mid，des作为辅助</span>        step += <span class="hljs-number">1</span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;step&#123;:&gt;3&#125;: &#123;&#125; &#123;&#125;-&gt;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(step,N,src,des)) <span class="hljs-comment"># 然后把第N个从src搬到des</span>        hanoi(mid,des,src,N-<span class="hljs-number">1</span>) <span class="hljs-comment"># 再把N-1个从mid搬到des，src作为辅助</span><span class="hljs-comment"># 执行</span>hanoi(<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-number">3</span>)</code></pre></div></p></li><li><p>输出结果：</p><p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">step</span>  <span class="hljs-number">1</span>: <span class="hljs-number">1</span> A-&gt;C<span class="hljs-attribute">step</span>  <span class="hljs-number">2</span>: <span class="hljs-number">2</span> A-&gt;B<span class="hljs-attribute">step</span>  <span class="hljs-number">3</span>: <span class="hljs-number">1</span> C-&gt;B<span class="hljs-attribute">step</span>  <span class="hljs-number">4</span>: <span class="hljs-number">3</span> A-&gt;C<span class="hljs-attribute">step</span>  <span class="hljs-number">5</span>: <span class="hljs-number">1</span> B-&gt;A<span class="hljs-attribute">step</span>  <span class="hljs-number">6</span>: <span class="hljs-number">2</span> B-&gt;C<span class="hljs-attribute">step</span>  <span class="hljs-number">7</span>: <span class="hljs-number">1</span> A-&gt;C</code></pre></div></p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础（四）：函数和代码复用</title>
    <link href="/2023/01/24/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%87%BD%E6%95%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8/"/>
    <url>/2023/01/24/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%87%BD%E6%95%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="函数和代码复用">函数和代码复用</h1><h2 id="函数">函数</h2><ol type="1"><li><p>定义</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> &lt;函数名&gt;(&lt;参数(<span class="hljs-number">0</span>个或多个)&gt;):    &lt;函数体&gt;    <span class="hljs-keyword">return</span> &lt;返回值&gt;</code></pre></div></p><blockquote><ol type="1"><li><p>所指定的参数是一种占位符</p></li><li><p>不调用，不执行</p></li><li><p>作用：模块化设计+代码复用</p></li></ol></blockquote></li><li><p>调用</p></li><li><p>参数传递</p><ul><li>必需参数</li><li>可选参数(默认参数)</li><li>可变参数(不定长参数)</li><li>关键字参数(按名称传递参数)</li></ul></li><li><p>返回值</p><ul><li>函数可以有返回值，也可以没有，可以有 return, 也可以没有。</li><li>return 可以传递 0 个返回值，也可以传递任意多个返回值（不带参数值的return 语句返回 None）。</li></ul></li><li><p>局部变量和全局变量</p><ul><li><p>规则1：<strong>局部变量和全局变量是不同变量</strong></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301241527921.jpg" /></p><blockquote><ol type="1"><li><p>局部变量是函数内部的占位符，与全局变量可能重名但不同</p></li><li><p>函数运算结束后，局部变量被释放</p></li><li><p>可以使用 global 保留字在函数内部使用全局变量</p></li></ol></blockquote></li><li><p>规则2：<strong>如果局部变量是组合数据类型且未创建，则等同于全局变量</strong></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301241527365.jpg" /></p></li></ul></li><li><p>lambda 函数(匿名函数)</p></li></ol><h2 id="代码复用">代码复用</h2><ul><li><p>模块化设计</p><blockquote><p>模块内部紧耦合，模块之间松耦合</p></blockquote></li></ul><h2 id="递归">递归</h2><ul><li><p>两个关键特征</p><ul><li>基例：存在一个或多个不需要再次递归的基例</li><li>链条：计算过程中的递归链</li></ul></li><li><p>递归的实现：函数+分支语句</p><ul><li>函数内部，采用分支语句对输入参数进行判断</li><li>基例和链条，分别编写对应代码</li></ul></li><li><p>实例：字符串反转，斐波那契数列，汉诺塔</p></li></ul><h2 id="思维导图">思维导图</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301241453030.png" /></p><h1 id="tips">Tips</h1><h2id="函数参数传递可使用的正式参数类型">函数参数传递：可使用的正式参数类型</h2><ol type="1"><li><p><strong>必需参数</strong></p><ul><li>必需参数须以正确的顺序传入函数。</li><li>调用时的数量必须和声明时的一样。</li></ul></li><li><p><strong>可选参数(默认参数)</strong></p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> &lt;函数名&gt;(&lt;必需参数&gt;, &lt;可选参数&gt;):    &lt;函数体&gt;    <span class="hljs-keyword">return</span> &lt;返回值&gt;</code></pre></div></p><ul><li>函数定义时可以为某些参数指定<strong>默认值</strong>，构成可选参数。</li><li>调用函数时，如果没有传递可选参数，则会使用默认值。</li><li>可选参数要放在必需参数之后。</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 举例</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo</span>(<span class="hljs-params"> name, age = <span class="hljs-number">35</span> </span>):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;名字: &quot;</span>, name)   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;年龄: &quot;</span>, age)   <span class="hljs-keyword">return</span>printinfo( <span class="hljs-string">&quot;runoob&quot;</span> )<span class="hljs-comment"># 输出</span>名字:  runoob年龄:  <span class="hljs-number">35</span></code></pre></div></li><li><p><strong>可变参数(不定长参数)</strong></p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> &lt;函数名&gt;(&lt;参数&gt;, *b ):    &lt;函数体&gt;    <span class="hljs-keyword">return</span> &lt;返回值&gt;</code></pre></div></p><ul><li>函数定义时可以设计可变数量的参数，即<strong>不确定参数总数量</strong>。</li><li>加了星号 <code>*</code> 的参数会以 <strong>元组(tuple)</strong>的形式导入，存放所有未命名的变量参数。</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 举例</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo</span>(<span class="hljs-params"> arg1, *vartuple </span>):   <span class="hljs-built_in">print</span> (arg1)   <span class="hljs-built_in">print</span> (vartuple)printinfo( <span class="hljs-number">70</span>, <span class="hljs-number">60</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span> )<span class="hljs-comment"># 输出</span><span class="hljs-number">70</span>(<span class="hljs-number">60</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>)</code></pre></div></li><li><p><strong>关键字参数(按名称传递参数)</strong></p><p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python解释器能用参数名匹配参数值。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 举例</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo</span>(<span class="hljs-params"> name, age </span>):   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;名字: &quot;</span>, name)   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;年龄: &quot;</span>, age)   <span class="hljs-keyword">return</span>printinfo( age=<span class="hljs-number">50</span>, name=<span class="hljs-string">&quot;runoob&quot;</span> )<span class="hljs-comment"># 输出</span>名字:  runoob年龄:  <span class="hljs-number">50</span></code></pre></div></li></ol><h2 id="lambda函数匿名函数"><strong>lambda</strong>函数（匿名函数）</h2><ul><li><p>Python使用 <strong>lambda</strong> 来创建匿名函数，不再使用 <strong>def</strong> 语句这样标准的形式定义一个函数。</p></li><li><p>格式：<code>&lt;函数名&gt; = lambda &lt;参数&gt;: &lt;表达式&gt;</code></p></li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 例1</span><span class="hljs-built_in">sum</span> = <span class="hljs-keyword">lambda</span> arg1, arg2: arg1 + arg2<span class="hljs-comment"># 调用sum函数</span><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;相加后的值为 : &quot;</span>, <span class="hljs-built_in">sum</span>( <span class="hljs-number">10</span>, <span class="hljs-number">20</span> ))<span class="hljs-comment"># 输出</span>相加后的值为 :  <span class="hljs-number">30</span><span class="hljs-comment"># 例2，将匿名函数封装在 myfunc 函数中</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">n</span>):    <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> a : a * n<span class="hljs-comment"># 通过传入不同的参数来创建不同的匿名函数</span>mydoubler = myfunc(<span class="hljs-number">2</span>) <span class="hljs-comment"># 等价于 mydoubler = lambda a : a * 2</span>mytripler = myfunc(<span class="hljs-number">3</span>) <span class="hljs-comment"># 等价于 mytripler = lambda a : a * 3</span><span class="hljs-built_in">print</span>(mydoubler(<span class="hljs-number">11</span>))<span class="hljs-built_in">print</span>(mytripler(<span class="hljs-number">11</span>))<span class="hljs-comment"># 输出</span><span class="hljs-number">22</span><span class="hljs-number">33</span></code></pre></div><blockquote><p>谨慎使用 lambda 函数</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 与 Packages（三）：random库</title>
    <link href="/2023/01/24/Python-%E4%B8%8E-Packages%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9Arandom%E5%BA%93/"/>
    <url>/2023/01/24/Python-%E4%B8%8E-Packages%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9Arandom%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>random 是 python标准库之一，这个模块实现了各种分布的伪随机数生成器。</p><p>几乎所有的函数都依赖于基本函数 <code>random()</code>，它在半开放范围<code>[0.0,1.0)</code> 内均匀生成一个随机浮点数。</p><h1 id="个主要函数">8个主要函数</h1><table><thead><tr class="header"><th><code>random.seed(a=None)</code></th><th>给定随机数种子，初始化随机数生成器。</th></tr></thead><tbody><tr class="odd"><td><code>random.random()</code></td><td>生成一个 <code>[0,1)</code> 的小数</td></tr><tr class="even"><td><code>random.randint(a, b)</code></td><td>生成一个 <code>[a,b]</code> 的整数</td></tr><tr class="odd"><td><code>random.randrange(start, stop[, step)</code></td><td>生成一个 <code>[start,stop-1]</code> ，步长为 <code>step</code>的整数</td></tr><tr class="even"><td><code>random.uniform(a, b)</code></td><td>生成一个 <code>[a,b]</code> 的小数</td></tr><tr class="odd"><td><code>random.getrandbits(k)</code></td><td>生成一个 <code>k</code> 比特长的整数</td></tr><tr class="even"><td><code>random.choice(seq)</code></td><td>从序列 <code>seq</code> 中随机选择一个元素</td></tr><tr class="odd"><td><code>random.shuffle(seq)</code></td><td>将序列 <code>seq</code> 的元素随机打乱，返回打乱后的序列</td></tr></tbody></table><blockquote><p>shuffle：洗牌，打乱次序</p></blockquote><h1 id="tips">Tips</h1><ol type="1"><li><p>random库-帮助文档</p><p><a href="https://docs.python.org/3.9/library/random.html">random -Generate pseudo-random numbers</a></p></li><li><p>random-举例</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>random()                             <span class="hljs-comment"># Random float:  0.0 &lt;= x &lt; 1.0</span><span class="hljs-number">0.37444887175646646</span><span class="hljs-meta">&gt;&gt;&gt; </span>uniform(<span class="hljs-number">2.5</span>, <span class="hljs-number">10.0</span>)                   <span class="hljs-comment"># Random float:  2.5 &lt;= x &lt;= 10.0</span><span class="hljs-number">3.1800146073117523</span><span class="hljs-meta">&gt;&gt;&gt; </span>randrange(<span class="hljs-number">0</span>, <span class="hljs-number">101</span>, <span class="hljs-number">2</span>)                 <span class="hljs-comment"># Even integer from 0 to 100 inclusive</span><span class="hljs-number">26</span><span class="hljs-meta">&gt;&gt;&gt; </span>choice([<span class="hljs-string">&#x27;win&#x27;</span>, <span class="hljs-string">&#x27;lose&#x27;</span>, <span class="hljs-string">&#x27;draw&#x27;</span>])      <span class="hljs-comment"># Single random element from a sequence</span><span class="hljs-string">&#x27;draw&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>deck = <span class="hljs-string">&#x27;ace two three four&#x27;</span>.split()<span class="hljs-meta">&gt;&gt;&gt; </span>shuffle(deck)                        <span class="hljs-comment"># Shuffle a list</span><span class="hljs-meta">&gt;&gt;&gt; </span>deck[<span class="hljs-string">&#x27;four&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;ace&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>]</code></pre></div></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础（三）：程序控制结构</title>
    <link href="/2023/01/23/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
    <url>/2023/01/23/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="程序的控制结构">程序的控制结构</h1><h2 id="顺序结构">顺序结构</h2><h2 id="分支结构">分支结构</h2><ol type="1"><li><p>单分支(<code>if</code>)、二分支(<code>if、else</code>)、多分支(<code>if、elif、else</code>)</p><ul><li><p>二分支的<em>紧凑形式</em>：<code>&lt;表达式1&gt; if &lt;条件&gt; else &lt;表达式2&gt;</code></p><blockquote><p>例如：<code>print("猜&#123;&#125;了".format("对" if guess == 99 else "错"))</code></p></blockquote></li></ul></li><li><p>条件判断及组合</p><ul><li><p><code>&gt;、&gt;=、&lt;、&lt;=、==、!=</code></p></li><li><p><code>and</code>(与)、<code>or</code>(或)、<code>not</code>(非)</p></li></ul></li><li><p>异常处理</p><ul><li><code>try</code>、<code>except</code></li></ul></li></ol><h2 id="循环结构">循环结构</h2><ol type="1"><li><p>遍历循环</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> &lt;循环变量&gt; <span class="hljs-keyword">in</span> &lt;遍历结构&gt;:    &lt;语句块&gt;</code></pre></div></p><ul><li><p>计数循环</p><blockquote><p><code>for i in range(n):</code></p></blockquote></li><li><p>字符串遍历循环</p><blockquote><p><code>for c in str:</code></p></blockquote></li><li><p>列表遍历循环</p><blockquote><p><code>for l in list:</code></p></blockquote></li><li><p>文件遍历循环</p><blockquote><p><code>for line in fi:</code></p><p><code>fi</code> 是文件标识符，遍历文件每一行</p></blockquote></li></ul></li><li><p>无限循环(条件控制的循环)</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">while</span> &lt;条件&gt;:    &lt;语句块&gt;</code></pre></div></p></li><li><p>循环控制保留字</p><ul><li><code>break</code>：跳出当前(<em>最内层</em>)循环</li><li><code>continue</code>：跳过本次循环，继续下次循环</li></ul></li><li><p>循环高级用法：<strong>循环与 else 组合</strong></p></li></ol><h2 id="思维导图">思维导图</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301231416023.png" /></p><h1 id="tips">Tips</h1><ol type="1"><li><p>异常处理</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301231414224.png" /></p><ul><li><p><strong>try/except</strong>：异常捕捉</p><ul><li>如何执行：<ul><li>首先执行 try 子句，如果没有异常发生，try 子句执行后结束。</li><li>如果在执行 try 子句时发生了异常， try 子句余下部分不再执行，转到except 子句捕捉异常。如果异常类型和 except 之后的名称相符，执行对应的except 子句。</li></ul></li><li>一个 try 语句可以包含多个 except子句，分别来处理不同的特定异常。<strong>最多只有一个分支会被执行。</strong></li><li>一个 except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。</li><li>最后一个 except 子句可以忽略异常的名称。</li></ul><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 使用举例</span><span class="hljs-keyword">try</span>:    &lt;语句块&gt;<span class="hljs-keyword">except</span> OSError:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;OS error&quot;</span>)<span class="hljs-keyword">except</span> ValueError:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Value error&quot;</span>)<span class="hljs-keyword">except</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Unexpected error:&quot;</span>)</code></pre></div></p></li><li><p><strong>try/except...else</strong>：</p><ul><li><strong>else</strong> 子句可选，放在所有的 except 子句之后</li><li>在 try 子句没有发生任何异常的时候执行。</li></ul></li><li><p><strong>try-finally</strong>：无论是否发生异常都将执行最后的代码。</p></li></ul><blockquote><p>抛出异常：Python 使用 <code>raise</code> 语句抛出一个指定的异常。</p></blockquote></li><li><p>循环与 else</p><ul><li><p>for 循环与 else 组合</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># for 循环与 else</span><span class="hljs-comment"># else 在 for 循环正常循环结束时被执行，被 break 终止时不执行</span><span class="hljs-comment"># 格式：</span><span class="hljs-keyword">for</span> &lt;variable&gt; <span class="hljs-keyword">in</span> &lt;sequence&gt;:    &lt;statements&gt;<span class="hljs-keyword">else</span>:    &lt;statements&gt;<span class="hljs-comment"># 实例1：正常循环结束</span>sites = [<span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>]<span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> sites:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;循环数据 &quot;</span> + s)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有循环数据!&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成循环!&quot;</span>)<span class="hljs-comment"># 输出结果</span>循环数据 Baidu循环数据 Google循环数据 Taobao没有循环数据!完成循环!<span class="hljs-comment"># 实例2：被 break 终止</span>sites = [<span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>]<span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> sites:    <span class="hljs-keyword">if</span> s == <span class="hljs-string">&quot;Google&quot;</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;跳出!&quot;</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;循环数据 &quot;</span> + s)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有循环数据!&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成循环!&quot;</span>)<span class="hljs-comment"># 输出结果</span>循环数据 Baidu跳出!完成循环!</code></pre></div></p></li><li><p>while 循环与 else 组合</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># while 循环与 else</span><span class="hljs-comment"># 如果 while 后面的条件语句为 false 时，则执行 else 的语句块。</span><span class="hljs-comment"># 格式：</span><span class="hljs-keyword">while</span> &lt;expr&gt;:    &lt;statement(s)&gt;<span class="hljs-keyword">else</span>:    &lt;additional_statement(s)&gt;<span class="hljs-comment"># 实例</span>count = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">2</span>:   <span class="hljs-built_in">print</span> (count, <span class="hljs-string">&quot; 小于 2&quot;</span>)   count += <span class="hljs-number">1</span><span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (count, <span class="hljs-string">&quot; 大于或等于 2&quot;</span>)<span class="hljs-comment"># 输出结果</span><span class="hljs-number">0</span>  小于 <span class="hljs-number">2</span><span class="hljs-number">1</span>  小于 <span class="hljs-number">2</span><span class="hljs-number">2</span>  大于或等于 <span class="hljs-number">2</span></code></pre></div></p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 与 Packages（二）：time库</title>
    <link href="/2023/01/23/Python-%E4%B8%8E-Packages%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9Atime%E5%BA%93/"/>
    <url>/2023/01/23/Python-%E4%B8%8E-Packages%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9Atime%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>time 是 python 标准库之一，该模块提供各种与时间相关的功能。</p><blockquote><p>尽管此模块始终可用，但并非所有函数在所有平台上都可用。此模块中定义的大多数函数调用具有相同名称的C 库函数。</p></blockquote><h1 id="三类函数">三类函数</h1><ol type="1"><li><p>时间获取</p><table><thead><tr class="header"><th><code>time.time()</code></th><th>以浮点数形式，返回自 epoch以来的时间（以秒为单位）<code>the epoch is January 1, 1970, 00:00:00 (UTC).</code></th></tr></thead><tbody><tr class="odd"><td><code>time.ctime()</code></td><td>获取当前时间，以<em>字符串</em>形式表示</td></tr><tr class="even"><td><code>time.gmtime()</code></td><td>获取当前时间，转换为 UTC 中的 <code>struct_time</code></td></tr><tr class="odd"><td><code>time.localtime()</code></td><td>与 <code>time.gmtime()</code> 类似，但转换为<em>本地时间</em></td></tr></tbody></table></li><li><p>时间格式化</p><table><thead><tr class="header"><th><code>time.strftime(format[,t])</code></th><th>将获取的 t转换为指定格式的字符串。<code>time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.gmtime())</code></th></tr></thead><tbody><tr class="odd"><td><code>time.strptime(string[,format])</code></td><td>根据格式分析表示时间的字符串。<code>time.strptime("30 Nov 00", "%d %b %y")</code></td></tr></tbody></table></li><li><p>计时</p><table><thead><tr class="header"><th><code>time.perf_counter()</code></th><th>返回计数器的值，用于测量较短的持续时间。返回值的参考点未定义，因此只有两次调用的结果之差是有效的。</th></tr></thead><tbody><tr class="odd"><td><code>time.sleep(secs)</code></td><td>在给定的秒数内暂停执行调用线程。</td></tr></tbody></table></li></ol><h1 id="tips">Tips</h1><ol type="1"><li><p>time 库-帮助文档</p><p><a href="https://docs.python.org/3.9/library/time.html">time - Timeaccess and conversions</a></p></li><li><p>Python 给两个变量赋值</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 方式1</span>na = <span class="hljs-string">&quot;偏瘦&quot;</span>;ni = <span class="hljs-string">&quot;偏瘦&quot;</span><span class="hljs-comment"># 方式2</span>na,ni = <span class="hljs-string">&quot;偏瘦&quot;</span>,<span class="hljs-string">&quot;偏瘦&quot;</span>a,b = <span class="hljs-number">1</span>,<span class="hljs-number">2</span>x,y = r.random(),r.random()height,weight = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>())</code></pre></div></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础（二）：基本数据类型</title>
    <link href="/2023/01/22/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/01/22/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="基本数据类型">基本数据类型</h1><h2 id="数字类型及操作">数字类型及操作</h2><ol type="1"><li><p>数字类型</p><blockquote><p>数字类型可以自动“拓宽”：<em>整数→浮点数→复数</em></p></blockquote><ul><li><p>整数</p><blockquote><p>4 种进制表示（十进制、二进制、八进制、十六进制）</p></blockquote></li><li><p>浮点数</p><blockquote><ol type="a"><li><p>浮点数运算存在不确定尾数</p></li><li><p>浮点数可采用科学记数法表示</p></li></ol></blockquote></li><li><p>复数</p></li></ul></li><li><p>数值运算操作符</p><ul><li><p><code>x+y</code> | <code>x-y</code> | <code>x*y</code> |<code>x/y</code> | <code>x//y</code> | <code>x%y</code> |<code>x**y</code> | <code>+x</code> | <code>-x</code></p></li><li><p><code>x op y</code></p><blockquote><p>op为二元操作符，例如 <code>x += y</code></p></blockquote></li></ul></li><li><p>数值运算函数</p><ul><li><p><code>abs(x) | pow(x,y[,z]) | divmod(x,y) | round(x,[,d]) | max(a,b,...) | min(a,b,...)</code></p><blockquote><ol type="a"><li><p><code>[ ]</code> 表示参数可以省略</p></li><li><p><code>divmod(x,y)</code>同时输出<strong>商和余数</strong></p></li><li><p><code>pow(x,y[,z])</code> 计算 <code>(x**y)%z</code></p></li><li><p><code>round(x[,d])</code> 四舍五入，d 是保留小数位数</p></li></ol></blockquote></li><li><p><code>int(x) | float(x) | complex(x)</code></p><blockquote><p>数字类型的显式转换</p></blockquote></li></ul></li></ol><h2 id="字符串类型及操作">字符串类型及操作</h2><ol type="1"><li><p>字符串类型</p><ul><li><p>如何表示</p><blockquote><p>一对单引号，一对双引号，一对三单引号，一对三双引号</p></blockquote></li><li><p>操作符：<code>x+y | x*n 或 n*x | x in s</code></p><blockquote><ol type="1"><li><p><code>x*n</code> 或 <code>n*x</code>：复制 n 次字符串 x</p></li><li><p><code>x in s</code>：判断 x 是 s 的子串</p></li></ol></blockquote></li></ul></li><li><p>处理字符串的函数</p><ul><li><p><code>len(s) | str(x) | hex(x) | oct(x)</code></p><blockquote><p><code>hex(x)</code> 与 <code>oct(x)</code>：整数 x的八进制与十六进制小写形式字符串。</p></blockquote></li><li><p><code>chr(u) | ord(x)</code></p><blockquote><ol type="1"><li><p>u 为 Unicode 编码，<code>chr(u)</code> 返回对应的字符</p></li><li><p>x 为字符，<code>ord(x)</code> 返回对应的 Unicode 编码</p></li></ol></blockquote></li></ul></li><li><p>字符串处理方法</p><ul><li><p><code>.lower() | .upper() | .split(sep) | .count(sub) | .replace(old,new)</code></p></li><li><p><code>.center(width[,fillchar]) | .strip(chars) | .join(iter)</code></p></li><li><p>字符串格式化</p><ul><li><p><code>&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</code></p></li><li><p>槽： 用 <code>&#123;&#125;</code> 表示槽，如下图：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301222146755.jpg" /></p><ul><li><p>槽内部的写法：<code>&#123;&lt;参数序号&gt;:&lt;格式控制标记&gt;&#125;</code></p></li><li><p>槽内部的格式控制标记：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301222147456.jpg" /></p></li></ul></li></ul></li></ul></li></ol><h2 id="思维导图">思维导图</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301222147552.png" /></p><h1 id="tips">Tips</h1><ol type="1"><li><p>字符串处理方法</p><table><thead><tr class="header"><th><code>.lower()</code> 与 <code>.upper()</code></th><th>返回字符串的副本，全部字符转为小写/大写</th></tr></thead><tbody><tr class="odd"><td><code>.count(sub)</code></td><td>返回子串sub在str中出现的次数</td></tr><tr class="even"><td><code>.replace(old,new)</code></td><td>返回字符串的副本，所有old子串被替换为new</td></tr><tr class="odd"><td><code>.center(width[,fillchar])</code></td><td>让字符串根据宽度width居中，fillchar是用于填充的符号</td></tr><tr class="even"><td><code>.strip(chars)</code></td><td>删除字符串两端的空格或指定字符chars。<code>"123abob321".strip('12')</code>结果为<code>3abob3</code></td></tr><tr class="odd"><td><code>.split(sep)</code></td><td>以sep分割字符串，返回列表，<code>"A,B,C".split(",")</code>结果为<code>['A','B','C']</code></td></tr><tr class="even"><td><code>.join(iter)</code></td><td>联结字符串元素。<code>"-".join("12345")</code>结果为<code>1-2-3-4-5</code></td></tr></tbody></table><blockquote><p>split：分开，join：联合</p></blockquote></li><li><p>字符串的格式化输出<code>.format()</code>，对槽的内部控制格式加深理解</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301222147456.jpg" /></p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#eg1</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;工作日的努力参数是: &#123;:.3f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dayfac))<span class="hljs-comment">#eg2</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;</span>.<span class="hljs-built_in">format</span>(c,a,b,d) ,end=<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment">#eg3</span>N = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>())<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,N+<span class="hljs-number">1</span>,<span class="hljs-number">2</span>): <span class="hljs-comment"># 从1到N，步长为2</span>    <span class="hljs-comment">#print((&#x27;*&#x27;*i).center(N,&#x27; &#x27;)) # 一种方式</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:^&#123;&#125;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;*&#x27;</span>*i,N)) <span class="hljs-comment"># 另一种方式</span>    <span class="hljs-comment"># 注意如果用print(&quot;&#123;:^N&#125;&quot;.format(&#x27;*&#x27;*i))是错误的</span></code></pre></div></p></li><li><p>Python 没有字符类型，不能直接进行字符加减运算，需借助<code>chr(u)</code> 和 <code>ord(x)</code> 函数</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#凯撒密码加密</span>plaintext = <span class="hljs-built_in">input</span>()ciphertext = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> plaintext:    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span> &lt;= p &lt;= <span class="hljs-string">&#x27;z&#x27;</span>: <span class="hljs-comment"># 字符串比较</span>        **c = <span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">ord</span>(p)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))+<span class="hljs-number">3</span>)%<span class="hljs-number">26</span>+<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))**    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;A&#x27;</span> &lt;= p &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>: <span class="hljs-comment"># 字符串比较</span>        **c = <span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">ord</span>(p)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))+<span class="hljs-number">3</span>)%<span class="hljs-number">26</span>+<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))**    <span class="hljs-keyword">else</span>:        c = p    ciphertext += c<span class="hljs-built_in">print</span>(ciphertext)</code></pre></div></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 与 Packages（一）：turtle库</title>
    <link href="/2023/01/20/Python-%E4%B8%8E-Packages%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9Aturtle%E5%BA%93/"/>
    <url>/2023/01/20/Python-%E4%B8%8E-Packages%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9Aturtle%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="基本绘图体系turtle">基本绘图体系——turtle</h1><p><img src="https://docs.python.org/3.9/_images/turtle-star.png" /></p><h2 id="turtle库介绍">turtle库介绍</h2><ol type="1"><li><p>窗体</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301202242318.jpg" /></p><blockquote><p><code>turtle.setup(width,height,startx,starty)</code></p></blockquote></li><li><p>坐标</p><ul><li><p>绝对坐标</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301202242075.jpg" /></p><blockquote><p><code>turtle.goto(x,y)</code></p></blockquote></li><li><p>海龟坐标</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301202243067.jpg" /></p></li><li><p>角度坐标(绝对角度)</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301202243987.jpg" /></p><blockquote><p><code>turtle.seth(angle)</code></p></blockquote></li></ul></li><li><p>色彩</p></li></ol><h2 id="turtle库函数">turtle库函数</h2><ol type="1"><li><p>画笔控制</p><ul><li><p><code>penup() | pu()</code> 抬笔</p></li><li><p><code>pendown() | pd()</code> 落笔</p></li><li><p><code>pensize() | width()</code> 粗细</p></li><li><p><code>pencolor()</code> 颜色</p><blockquote><p>pencolor()的3种形式</p><blockquote><p>pencolor("purple")</p><p>pencolor(r,g,b)</p><p>pencolor((r,g,b))</p></blockquote></blockquote></li></ul></li><li><p>运动控制</p><ul><li><p><code>forward() | fd()</code></p><blockquote><p>海龟前进 distance 指定的距离，方向为海龟的朝向。</p></blockquote></li><li><p><code>backward() | back() | bk()</code></p><blockquote><p>海龟后退 distance 指定的距离，方向与海龟的朝向相反。</p></blockquote></li><li><p><code>circle()</code></p><blockquote><p><code>circle(radius, extent)</code> 绘制一个 radius指定半径的圆。</p><p>圆心在海龟左边 radius 个单位；extent为一个夹角，用来决定绘制圆的一部分。</p></blockquote></li><li><p><code>goto() | setpos() | setposition()</code></p><blockquote><p>海龟移动到一个绝对坐标(x,y)。如果画笔落下将会画线。不改变海龟的朝向。</p></blockquote></li><li><p><code>home()</code></p><blockquote><p>海龟移至初始坐标 (0,0)，并设置朝向为初始方向。</p></blockquote></li><li><p><code>speed()</code></p><blockquote><p>设置海龟移动的速度为 0..10 表示的整型数值。</p><p>速度值从 1 到 10，画线和海龟转向的动画效果逐级加快。speed = 0表示没有 动画效果。</p></blockquote></li></ul></li><li><p>方向控制</p><ul><li><p><code>setheading() | seth()</code></p><blockquote><p>设置海龟的朝向为 angle。angle 为绝对角度。</p></blockquote></li><li><p><code>right() | rt()</code></p><blockquote><p>海龟右转 angle 个单位。(单位默认为角度)</p></blockquote></li><li><p><code>left() | lt()</code></p><blockquote><p>海龟左转 angle 个单位。</p></blockquote></li></ul></li></ol><blockquote><p>思维导图</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301202244216.png" /></p></blockquote><h1 id="tips">Tips</h1><ol type="1"><li><p>turtle 库</p><p>turtle 库是 Python 的标准库之一，属于入门级的图形绘制函数库；</p><blockquote><p>Python 计算生态 = 标准库 + 第三方库</p><blockquote><p>标准库：随 Pyhton 解释器直接安装的功能模块。</p><p>第三方库：需要经过安装才能使用的功能模块。</p></blockquote></blockquote><p>帮助文档：<ahref="https://docs.python.org/3.9/library/turtle.html">turtle - Turtlegraphics</a></p></li><li><p>导入库的方法</p><ul><li><code>import turtle</code> 或 <code>from turtle import *</code><ul><li>相同：都是引入 turtle 库中的所有方法</li><li>不同：第一种方式下需使用<code>turtle.fd()</code>，第二种方式直接使用 <code>fd()</code>即可。</li></ul></li><li><code>import turtle as t</code></li></ul></li><li><p>循环语句与 range() 函数</p><ul><li><p><code>for</code> 循环</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#一般格式</span><span class="hljs-keyword">for</span> &lt;variable&gt; <span class="hljs-keyword">in</span> &lt;sequence&gt;:&lt;statements&gt;<span class="hljs-comment">#实例</span>&gt;&gt;&gt;languages = [<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;C++&quot;</span>, <span class="hljs-string">&quot;Python&quot;</span>] <span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> languages:<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span> (x)<span class="hljs-meta">... </span>CC++Python</code></pre></div></p></li><li><p><code>range()</code> 函数：产生循环计数序列</p><ul><li><code>range(n)</code>，产生 0 到 n-1的整数序列，<code>for i in range(5):</code></li><li><code>range(m,n)</code>，产生 m 到 n-1的整数序列，<code>for i in range(5,9) :</code></li><li><code>range(m,n,q)</code>，产生 m 到 n-1 的整数序列，步长为q，<code>for i in range(0,11,2) :</code></li></ul></li></ul></li></ol><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301202312733.jpg" /></p>]]></content>
    
    
    <categories>
      
      <category>Python库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础（一）：基本语法元素</title>
    <link href="/2023/01/19/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%85%83%E7%B4%A0/"/>
    <url>/2023/01/19/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="初识-python">初识 Python</h1><p><imgsrc="https://www.python.org/static/img/python-logo@2x.png" /></p><h2 id="官方网站">官方网站</h2><ul><li>Python是一种容易学习的强大编程语言。它具有高效的高级数据结构和简单有效的面向对象编程方法。</li><li>Python优雅的语法和动态类型，以及它的<strong>解释</strong>性质，使其成为大多数平台上许多领域用于编写脚本和快速应用程序开发的理想语言。</li><li>Python解释器和广泛的标准库以源代码或二进制形式免费提供，适用于所有主要平台，可以从Python 网站 <ahref="https://www.python.org/">https://www.python.org/</a>免费获得。该网站还包含许多免费第三方 Python模块、程序和工具的分发版，以及其他文档。</li><li>有关标准对象和模块的描述，请参见 <ahref="https://docs.python.org/3/library/index.html#library-index">Python标准库</a>。<ahref="https://docs.python.org/3/reference/index.html#reference-index">Python语言参考</a>提供了该语言更正式的定义。</li></ul><h2 id="推荐课程">推荐课程</h2><p><ahref="https://www.icourse163.org/course/BIT-268001">Python语言程序设计_北京理工大学_嵩天</a></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301191852452.png" /></p><blockquote><p>计算机是运算工具，更是创新平台，高效有趣地利用计算机需要更简洁实用的编程语言。Python简洁却强大、简单却专业，它是当今世界最受欢迎的编程语言，学好它终身受用。请跟随我们，学习并掌握Python语言，一起动起来，站在风口、享受创新！</p><p>—— 课程团队</p></blockquote><h3 id="python123"><ahref="https://python123.io/index">Python123</a></h3><p>Python123 对应本课程链接：<ahref="https://python123.io/index/courses/7752">https://python123.io/index/courses/7752</a></p><blockquote><p>Python123 是 Python语言的学习平台，本课程相关作业、练习和考试都在该平台完成。</p></blockquote><h1 id="基本语法元素">基本语法元素</h1><h2 id="导图">导图</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301191521845.png" /></p><h2 id="tips">Tips</h2><ol type="1"><li><p><code>input()</code>函数接收任意类型输入，将所有输入默认为字符串处理，并返回字符串类型。</p><blockquote><p><code>input()</code>可以接收多个值：<code>a,b,c = (input().split())</code></p></blockquote><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 将所有输入默认为单个字符串处理</span><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-built_in">input</span>()<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(s)&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt; <span class="hljs-comment"># s为一个字符串&quot;1,2,3,4,5,6&quot;</span><span class="hljs-comment"># 可以接收多个值</span><span class="hljs-meta">&gt;&gt;&gt; </span>a,b,c=<span class="hljs-built_in">input</span>().split(<span class="hljs-string">&quot;,&quot;</span>) <span class="hljs-comment"># 接收3个值，以逗号分隔</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a is &#123;&#125;, b is &#123;&#125;, c is &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(a,b,c))a <span class="hljs-keyword">is</span> <span class="hljs-number">1</span>, b <span class="hljs-keyword">is</span> <span class="hljs-number">2</span>, c <span class="hljs-keyword">is</span> <span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(a)&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<span class="hljs-comment"># 如果接收3个但输入4个，产生ValueError</span><span class="hljs-meta">&gt;&gt;&gt; </span>a,b,c=<span class="hljs-built_in">input</span>().split(<span class="hljs-string">&quot;,&quot;</span>)<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>Traceback (most recent call last):  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;ValueError: too many values to unpack (expected <span class="hljs-number">3</span>)</code></pre></div></p></li><li><p><code>print()</code>函数默认输出是换行的，如果要实现不换行需要在变量末尾加上 <code>end=""</code></p><p><div class="code-wrapper"><pre><code class="hljs python">    array = <span class="hljs-string">&quot;零一二三四五六七八九&quot;</span>    num = <span class="hljs-built_in">input</span>()    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num:        <span class="hljs-built_in">print</span>(array[<span class="hljs-built_in">eval</span>(i)],end = <span class="hljs-string">&quot;&quot;</span>)    ```    <span class="hljs-number">3.</span> `<span class="hljs-built_in">eval</span>()` 函数用来执行一个 **字符串表达式**，并返回表达式的计算结果。        ```python    &gt;&gt;&gt; <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;pow(2,2)&#x27;</span>)    <span class="hljs-number">4</span>    &gt;&gt;&gt; <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;2 +    2&#x27;</span>)    <span class="hljs-number">4</span>    &gt;&gt;&gt; s = <span class="hljs-built_in">input</span>()    **<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>**    &gt;&gt;&gt; <span class="hljs-built_in">type</span>(s)    &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;  <span class="hljs-comment"># s为一个字符串&quot;1,2,3,4,5,6&quot;</span>    &gt;&gt;&gt; <span class="hljs-built_in">eval</span>(s) <span class="hljs-comment"># 执行这个字符串表达式</span>    (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)    &gt;&gt;&gt; <span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(s))    &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt; <span class="hljs-comment"># eval()函数将其解析为元组</span>    &gt;&gt;&gt; s = <span class="hljs-built_in">input</span>()    **&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>&#125;**    &gt;&gt;&gt; <span class="hljs-built_in">type</span>(s)    &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt; <span class="hljs-comment"># s为一个字符串&quot;&#123;&quot;a&quot;: 1, &quot;b&quot;: 2&#125;&quot;</span>    &gt;&gt;&gt; <span class="hljs-built_in">eval</span>(s)    &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;    &gt;&gt;&gt; <span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(s))    &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt; <span class="hljs-comment"># eval()函数将其解析为字典</span></code></pre></div></p></li><li><p>Python 保留字</p><blockquote><p>35个保留字</p></blockquote><table><thead><tr class="header"><th>global</th><th>if</th><th>is</th><th>True</th><th>class</th><th>except</th></tr></thead><tbody><tr class="odd"><td>import</td><td>elif</td><td>not</td><td>False</td><td>assert</td><td>finally</td></tr><tr class="even"><td>as</td><td>else</td><td>and</td><td>None</td><td>with</td><td>pass</td></tr><tr class="odd"><td>from</td><td>for</td><td>or</td><td>def</td><td>raise</td><td>try</td></tr><tr class="even"><td>break</td><td>while</td><td>in</td><td>del</td><td>yield</td><td>async</td></tr><tr class="odd"><td>continue</td><td></td><td>lambda</td><td>return</td><td>nonlocal</td><td>await</td></tr></tbody></table></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你的生产力工具集-uTools</title>
    <link href="/2023/01/15/%E4%BD%A0%E7%9A%84%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7%E9%9B%86-uTools/"/>
    <url>/2023/01/15/%E4%BD%A0%E7%9A%84%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7%E9%9B%86-uTools/</url>
    
    <content type="html"><![CDATA[<h1 id="新一代效率工具平台">新一代效率工具平台</h1><p><img src="https://res.u-tools.cn/website/utools.png" /></p><h2 id="介绍">介绍</h2><ul><li>uTools 是一个极简、集成插件、跨平台的桌面工具。</li><li>自由集成丰富插件，快速匹配「场景功能」，用完即走。</li><li>当你熟悉它后，能够提高生产效率，让你更加专注地改变世界。</li></ul><blockquote><p>官网：<a href="https://www.u.tools/">uTools</a></p></blockquote><p><ahref="https://www.bilibili.com/video/BV1eg411M7TZ?share_source=copy_web">观看uTools 的介绍视频</a></p><iframe src="//player.bilibili.com/player.html?aid=504310921&amp;bvid=BV1eg411M7TZ&amp;cid=374628689&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><h2 id="关键功能">关键功能</h2><ol type="1"><li><p>通过快捷键『Alt+Space』，快速唤起 utools 窗口。</p><p>支持英文、英文驼峰、中文拼音、拼音首字母来快速搜索，你只要记得一个大概的名字、拼音、英文缩写，直接输入快速找到你想要的。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/uTools.png"alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption></figure></li><li><p>选中内容，单击「鼠标」中键，弹出超级面板</p><p>你只需要安装一些很小但非常实用的插件，超级面板会根据当前选择的内容（文本、截图、文件、文件夹）自动匹配已安装的插件供你选择。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/utools1.png"alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption></figure></li><li><p>一切皆插件，丰富的插件市场任你选择</p><ul><li>uTools 最大的特点就是拥有强大的插件系统。</li><li>现在已有 400+插件，每个插件解决一个具体场景的问题，简洁美观、即用即走。</li><li>输入 <code>插件市场</code>进入插件管理，根据自己的需求挑选安装，组合成自己最称手的工具集合，为各种日常操作提供便利。</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/utools2.png"alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption></figure></li></ol><blockquote><p>更多内容请参考：<ahref="https://www.u.tools/docs/guide/about-uTools.html#utools-%E6%98%AF%E4%BB%80%E4%B9%88">帮助教程</a></p></blockquote><h1 id="utools-插件推荐">uTools 插件推荐</h1><p>在窗口输入<code>插件</code>，选择<code>插件市场</code>，进入并开始挑选你需要的插件。</p><ol type="1"><li><p>聚合翻译</p><p>这个插件整合有道翻译、腾讯翻译、百度翻译、搜狗翻译、谷歌翻译、必应翻译、DeepL翻译、彩云小译等，你可以自由选择。</p><p>关键字： <code>translate/翻译</code></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/utools3.png" /></p></li><li><p>超级剪切板</p><p>记录剪贴板历史并保存到本地，支持文字/图片/文件，随时可以查找并粘贴。</p><p>关键字：<code>剪切</code></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/4.png" /></p></li><li><p>Markdown笔记</p><ul><li>与传统富文本编辑方式结合，实时预览、存储</li><li>代码块支持 164 种语言</li><li>支持 TODO 任务列表</li><li>支持 KaTex 数学公式</li><li>导出 Markdown、PDF、HTML、图片</li></ul><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/5.png" /></p></li><li><p>JSON编辑器</p><ul><li>URL Params、XML、YAML 粘贴自动转为 JSON 格式</li><li>支持 JSON 转 XML、JSON 压缩、JSON 转义、JSON 转 TypeScript</li><li>在底部输入框使用 Javascript 语法快速对 json 数据进行过滤</li></ul><p>关键字：<code>json</code></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/6.png" /></p></li><li><p>本地搜索</p><p>插件基于 <a href="https://www.voidtools.com/zh-cn/">Everything</a>的本地搜索，内置了绿色版 Everything.</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/7.png" /></p></li><li><p>人生进度条</p><p>「人生如戏, 白驹过隙」,很有趣的插件</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/8.png" /></p></li></ol><blockquote><ul><li><p>uTools插件市场非常丰富，还有<code>图片压缩</code>、<code>批量重命名</code>、<code>备忘快贴</code>等众多好用的插件，在此不能逐一列举，更多有趣强大的插件需要你自行探索，相信一定不会让你失望！</p></li><li><p>可以说 uTools插件系统基本能解决你所想到的问题，这些插件由很多优秀的开发者在共同开发维护，如果你有相关技能，也可以加入开发者队伍！详请参见：<ahref="https://www.u.tools/docs/developer/welcome.html#plugin-json">uTools——插件开发</a></p></li><li><p>最后，感兴趣的读者可以关注 <code>uTools</code>官方公众号了解更多： <imgsrc="https://res.u-tools.cn/plugins/upload/qrcode_for_gh_91815b1958c7_258.jpg"alt="avatar" /></p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github+jsDelivr+PicGo，搭建高速稳定免费的个人图床</title>
    <link href="/2023/01/15/Github-jsDelivr-PicGo%E6%90%AD%E5%BB%BA%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2023/01/15/Github-jsDelivr-PicGo%E6%90%AD%E5%BB%BA%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="一工具介绍">一、工具介绍</h1><p>用 markdown写作，插入图片是不可避免的，图床可以方便地解决这个问题。</p><h2 id="图床">1. 图床</h2><ul><li>专门用于存储图片，生成外链，可直接插入到 Markdown 笔记中</li><li>优点：<ul><li>节省本地服务器空间</li><li>加快了图片加载速度</li><li>不用担心图片丢失</li></ul></li><li>缺点：<ul><li>部分图床收费，也有不少图床是免费的</li><li>免费图床面临不稳定、不持久、不安全的风险</li></ul></li></ul><blockquote><p>图床现状：</p><ul><li>免费图床：<a href="https://smms.app/">SM.MS</a>、<ahref="https://imgse.com/">路过图床</a>、<ahref="http://pic.xiaojianjian.net/">小贱贱图床</a>、<ahref="https://postimages.org/">Postimage</a> 等等<ul><li>无需注册，点开即用，永久储存</li><li>各有特色，各有限制，各有缺点</li></ul></li><li>大厂存储：<a href="https://www.qiniu.com/">七牛云</a>、<ahref="https://www.upyun.com/">又拍云</a>、<ahref="https://cloud.tencent.com/product/cos">腾讯云COS</a>、<ahref="https://www.aliyun.com/product/oss">阿里云OSS</a> 等<ul><li>容量限制，实名认证，域名备案</li><li>稳定、强大、可靠</li></ul></li></ul></blockquote><ul><li>综上，使用 GitHub 仓库创建一个图床，就是本文重点：稳定+免费！</li></ul><h2 id="jsdelivr">2. jsDelivr</h2><ul><li>jsDelivr 是国外一家优秀的公共 CDN服务提供商，也是首个「打通中国大陆与海外的免费 CDN 服务」。</li></ul><blockquote><p>CDN(Content Delivery Network)，即内容分发网络。</p><p>核心理念，就是将内容缓存在终端用户附近</p><p>CDN应用广泛，支持多种行业、多种场景内容加速</p></blockquote><ul><li>本篇文章只谈及利用 jsDelivr 加速 Github仓库的文件，我们可以借此搭建一个<strong>高速</strong>图床。</li></ul><h2 id="picgo">3. PicGo</h2><ul><li><p>图床工具：自动把本地图片上传到图床，并转换成链接的工具，简化操作，提高创作效率。</p></li><li><p>PicGo 是一款优秀的图床工具。用 Electron-vue开发，支持上传<strong>七牛云，又拍云，腾讯云COS，阿里云OSS，SM.MS，imgur，GitHub</strong>7种常用图床。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/picGo.png" /></p></li></ul><h1 id="二搭建步骤">二、搭建步骤</h1><h2 id="新建-github-仓库并生成-token">1. 新建 GitHub 仓库并生成Token</h2><ol type="1"><li><p>注册 <a href="https://github.com/">GitHub</a>账号，登录。</p></li><li><p>创建一个公开仓库，仓库名随意，如 <code>Img</code>，<code>ImgBed</code> &gt; 下方选择<code>Public</code></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/img1.png" /></p></li><li><p>进入账户设置:<code>Settings</code>-&gt;<code>Developer settings</code>-&gt;<code>Personal access tokens</code>-&gt;生成新的token</p><p><code>Note</code> 做一些描述，勾选上 <code>repo</code>的相关权限，即可生成一个 Token。如下图：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/img2.png" /></p><blockquote><p>注意：生成之后及时将 Token复制到你的本地，因为一旦关闭网页将不能再看到它。</p></blockquote></li></ol><h2 id="配置picgo">2. 配置picGo</h2><ol type="1"><li><p>下载 PicGo</p><p>下载地址：<ahref="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><blockquote><p>mac 用户选择 .dmg 下载，windwos 选择 .exe下载</p></blockquote><p>详细内容请参考 PicGo 文档：<ahref="https://picgo.github.io/PicGo-Doc/">https://picgo.github.io/PicGo-Doc/</a></p></li><li><p>配置环境变量</p><blockquote><p>确保你安装了 Node.js， 并且版本 &gt;= 16</p></blockquote><p>PicGo 的配置文件在不同系统里是不一样的：</p><ul><li>Windows: <code>%APPDATA%\picgo\data.json</code></li><li>Linux: <code>$XDG_CONFIG_HOME/picgo/data.json</code> 或<code>~/.config/picgo/data.json</code></li><li>macOS:<code>~/Library/Application\ Support/picgo/data.json</code></li></ul><p>例如:</p><ul><li><p>在windows里你可以在：<code>C:\Users\你的用户名\AppData\Roaming\picgo\data.json</code>找到它。</p></li><li><p>在linux里你可以在：<code>~/.config/picgo/data.json</code>里找到它。</p></li><li><p>macOS同理。</p></li></ul></li><li><p>配置picGo</p><blockquote><p>本文仅介绍 PicGo 配置 GitHub 图床，若想配置其它图床，请参考文档：<ahref="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E5%9B%BE%E5%BA%8A%E5%8C%BA">PicGo指南——配置手册——图床区</a></p></blockquote><p>GitHub 图床： <div class="code-wrapper"><pre><code class="hljs awk">&#123;<span class="hljs-string">&quot;repo&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-regexp">//</span> 仓库名，格式是username/reponame<span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-regexp">//</span> github token<span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-regexp">//</span> 自定义存储路径，比如img/<span class="hljs-string">&quot;customUrl&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-regexp">//</span> 自定义域名，注意要加http:<span class="hljs-regexp">//</span>或者https:<span class="hljs-regexp">//</span><span class="hljs-string">&quot;branch&quot;</span>: <span class="hljs-string">&quot;&quot;</span> <span class="hljs-regexp">//</span> 分支名，默认是main&#125;</code></pre></div></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/picGo%E9%85%8D%E7%BD%AE.png" /></p><ul><li><p>设定仓库名：<code>&lt;用户名/图床仓库名&gt;</code> 格式</p></li><li><p>设定分支名：<code>main</code></p></li><li><p>设定Token：粘贴之前生成的 Token</p></li><li><p>指定存储路径：如 <code>photos/</code>，会在仓库下自动创建<code>photos/</code> 文件夹，图片储存在此文件夹下</p></li><li><p>设定自定义域名：<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code></p><p>比如 <code>https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed</code></p><blockquote><p>在图片上传后，PicGo会生成图片访问链接</p><p>因为我们使用 jsDelivr 加速访问，所以设置为<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code> 格式</p></blockquote></li></ul></li></ol><h1 id="三开始使用">三、开始使用</h1><ul><li>拖拽或点击上传图片</li><li>提示成功上传到 GitHub 仓库</li><li>复制 Markdown 外链，插入 Markdown 笔记中</li></ul><blockquote><p>快速上手请参考：<ahref="https://picgo.github.io/PicGo-Doc/zh/guide/getting-started.html">PicGo指南——快速上手</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十分钟掌握 Markdown 基本语法，让你专注写作！</title>
    <link href="/2023/01/14/%E5%8D%81%E5%88%86%E9%92%9F%E6%8E%8C%E6%8F%A1Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E8%AE%A9%E4%BD%A0%E4%B8%93%E6%B3%A8%E5%86%99%E4%BD%9C/"/>
    <url>/2023/01/14/%E5%8D%81%E5%88%86%E9%92%9F%E6%8E%8C%E6%8F%A1Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E8%AE%A9%E4%BD%A0%E4%B8%93%E6%B3%A8%E5%86%99%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="那么开始用markdown写作">那么开始用markdown写作</h1><h2 id="标题">1. 标题</h2><ul><li><p>在标题文字前面加符号 <code>#</code></p><p><div class="code-wrapper"><pre><code class="hljs clean"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre></div></p></li><li><p>效果展示：</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301142122042.png"alt="title" /><figcaption aria-hidden="true">title</figcaption></figure></li></ul><h2 id="文本字体">2. 文本字体</h2><ul><li><p>在文字两端添加符号</p><p><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-strong">**加粗文字**</span><span class="hljs-emphasis">*斜体文字*</span><span class="hljs-strong">**<span class="hljs-emphasis">*斜体加粗文字*</span>**</span>~~加删除线的文字~~</code></pre></div></p></li><li><p>效果演示:</p><blockquote><p><strong>这是加粗的文字</strong></p><p><em>这是倾斜的文字</em></p><p><strong><em>这是斜体加粗的文字</em></strong></p><p><del>这是加删除线的文字</del></p></blockquote></li></ul><h2 id="区块引用">3. 区块引用</h2><ul><li><p>在文字前添加符号 <code>&gt;</code></p><p><div class="code-wrapper"><pre><code class="hljs ruby">&gt; 引用的内容<span class="hljs-meta prompt_">&gt;&gt;</span> 嵌套引用的内容</code></pre></div></p></li><li><p>效果演示:</p><blockquote><p>这是引用的内容</p><blockquote><p>这是嵌套引用的内容</p></blockquote></blockquote></li></ul><h2 id="水平分割线">4. 水平分割线</h2><ul><li><p>三个或者三个以上的 <code>-</code> 或者 <code>*</code> 。</p><p><div class="code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-bullet">---</span><span class="hljs-bullet"></span><span class="hljs-section">***</span><span class="hljs-section">--------</span></code></pre></div></p></li><li><p>效果演示:</p><hr /><blockquote><p>上面这条线就是水平分割线</p></blockquote></li></ul><h2 id="超链接">5. 超链接</h2><ul><li><p>格式：<code>[描述文字](链接地址)</code></p></li><li><p>举例： <div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-attr">[百度]</span>(<span class="hljs-attribute">http</span>:<span class="hljs-comment">//baidu.com)</span>[Visual Studio Code](<span class="hljs-attribute">https</span>:<span class="hljs-comment">//code.visualstudio.com/)</span></code></pre></div></p></li><li><p>效果演示：</p><blockquote><p><a href="http://baidu.com">百度</a></p><p><a href="https://code.visualstudio.com/">Visual Studio Code</a></p><p>单击上面的文字就可以跳转到相应的网页</p></blockquote></li></ul><h2 id="代码高亮">6. 代码高亮</h2><ul><li><p>反引号括起来：</p><ul><li><p>单行代码：使用一对单反引号括起来</p></li><li><p>代码片段：使用一对三反引号括起来（每个<code>```</code>独占一行）</p></li></ul></li><li><p>效果演示：</p><p><code>print("hello world")</code></p><p><div class="code-wrapper"><pre><code class="hljs python">string = <span class="hljs-string">&quot;不忘初心，牢记使命&quot;</span><span class="hljs-built_in">print</span>(string)</code></pre></div></p><blockquote><p>注：反引号就是键盘数字 1️⃣ 左边那个键</p></blockquote></li></ul><h2 id="列表">7. 列表</h2><ul><li><p>有序列表</p><p><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 列表内容<span class="hljs-bullet">2.</span> 列表内容<span class="hljs-bullet">3.</span> 列表内容注意：序号与内容之间要有空格</code></pre></div></p></li><li><p>无序列表</p><p><div class="code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>列表内容<span class="hljs-bullet">- </span>列表内容<span class="hljs-bullet">- </span>列表内容注意：- 与内容之间要有一个空格</code></pre></div></p></li></ul><h2 id="插入图片">8. 插入图片</h2><ul><li><p>通用语法：</p><p><div class="code-wrapper"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[图片alt]</span>(图片地址)图片alt就是对图片内容的解释，可省略。</code></pre></div></p></li><li><p>效果演示：</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/%E8%90%BD%E4%B8%8E%E5%90%9B%E8%AF%B4.jpg"alt="qr码" /><figcaption aria-hidden="true">qr码</figcaption></figure></li></ul><h2 id="插入表格">9. 插入表格</h2><ul><li><p>通用语法： <div class="code-wrapper"><pre><code class="hljs asciidoc">表头|表头|表头<span class="hljs-meta">:-:|:-:|:-:</span>内容|内容|内容内容|内容|内容第二行用于分割表头和内容。<span class="hljs-bullet">- </span>两边添加 : 表示文字居中示例：名字|颜色|爱好<span class="hljs-meta">:-:|:-:|:-:</span>大猫|橘|吃二猫|黑|睡小猫|绿|玩</code></pre></div></p></li><li><p>效果演示：</p></li></ul><table><thead><tr class="header"><th style="text-align: center;">名字</th><th style="text-align: center;">颜色</th><th style="text-align: center;">爱好</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">大猫</td><td style="text-align: center;">橘</td><td style="text-align: center;">吃</td></tr><tr class="even"><td style="text-align: center;">二猫</td><td style="text-align: center;">黑</td><td style="text-align: center;">睡</td></tr><tr class="odd"><td style="text-align: center;">小猫</td><td style="text-align: center;">绿</td><td style="text-align: center;">玩</td></tr></tbody></table><h2 id="数学公式">10. 数学公式</h2><ul><li><p>Markdown 支持 LaTex 公式，使用符号 <code>$</code></p><p><div class="code-wrapper"><pre><code class="hljs gams">行内公式：<span class="hljs-symbol">$</span>...<span class="hljs-symbol">$</span>行间公式：<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>...<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>示例：行内公式：<span class="hljs-symbol">$</span>\<span class="hljs-built_in">sqrt</span>&#123;x^<span class="hljs-number">2</span>+y^<span class="hljs-number">2</span>&#125;<span class="hljs-symbol">$</span>行间公式：<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>f(x)=\sum_&#123;i=<span class="hljs-number">0</span>&#125;^n \int_a^b&#123;g(t,i)dt&#125;<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span></code></pre></div></p></li><li><p>效果演示：</p><p>行内公式 <spanclass="math inline">\(\sqrt{x^2+y^2}\)</span>，随处可以插入</p><p>行间公式： <span class="math display">\[f(x)=\sum_{i=0}^n\int_a^b{g(t,i)dt}\]</span></p></li></ul><h2 id="其它语法">11. 其它语法</h2><ul><li>目录：<ul><li>在 Markdown 文件的开头输入 <code>[TOC]</code> ，实现目录（Table ofContent）</li><li>或者手动添加目录：<code>- [那么开始用markdown写作](#那么开始用markdown写作)</code></li></ul></li><li>脚注：<ul><li>在需要加注脚的文字后添加<code>[^注脚名]</code>，脚注自动搬运到文章末尾。</li><li>效果：这里需要一个脚注<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="这是脚注1的内容">[1]</span></a></sup></li></ul></li><li>邮箱：<ul><li>使用一对 <code>&lt;&gt;</code> 将邮箱括起来</li><li>举例：<code>&lt;lxp2000@outlook.com&gt;</code></li><li>效果：<a href="mailto:lxp2000@outlook.com"class="email">lxp2000@outlook.com</a></li></ul></li><li>文本换行：<ul><li>使用 <code>&lt;br&gt;</code> 或 <code>&lt;br/&gt;</code> 或<code>&lt;br /&gt;</code></li><li>举例：<code>不忘初心&lt;br/&gt;牢记使命</code></li></ul></li><li>HTML 语法：Markdown 支持原生 HTML语法</li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>这是脚注1的内容<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Markdown那些事</title>
    <link href="/2023/01/14/%E5%85%B3%E4%BA%8EMarkdown%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <url>/2023/01/14/%E5%85%B3%E4%BA%8EMarkdown%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="markdown-是什么">Markdown 是什么</h1><ul><li><p>Markdown是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式来编写文档，方便地转换为XHTML（或者HTML）文档。</p></li><li><p>由于 Markdown的轻量化、易读易写特性，并且支持图片，图表、数学公式，许多网站都广泛使用Markdown 来撰写帮助文档或是用于论坛上发表消息。如GitHub、CSDN、简书等，甚至还能用于撰写电子书。</p><blockquote><p>简单来说，它可以免去你繁琐的排版工作，而更加专注于写作。</p><p>详细介绍请看 <ahref="https://baike.baidu.com/item/markdown/3245829?fr=aladdin">百度百科</a></p></blockquote></li></ul><h1 id="markdown-用来做什么">Markdown 用来做什么</h1><ul><li><p>编写说明文档，用它写的文档很多技术论坛、平台都能通用；</p></li><li><p>撰写博客文章，可以使文字、代码都非常清晰易读；</p></li><li><p>Markdown 格式转换方便，可以轻松地将文本转换为 HTML、PDF 等。</p><blockquote><p>近几年随着相关应用平台的发展，Markdown以其独到的优势迅速火起来了。</p><p>Markdown的标记很少，常用的也就十个左右，它是一种非常轻量的标记语言，因此深受技术人员的喜爱。</p><p>更多内容可见知乎问答：<ahref="https://www.zhihu.com/question/20958887">md文件怎么用？</a></p></blockquote></li></ul><h1 id="markdown-文件怎么打开">Markdown 文件怎么打开</h1><p>如果你只是想阅读一个 .md 文件，又不想下载 Markdown编辑器，一个好方法是在浏览器中通过插件阅读。</p><ol type="1"><li><p>以 Edge 浏览器为例，在浏览器中搜索并安装 <ahref="https://microsoftedge.microsoft.com/addons/detail/markdown-viewer/cgfmehpekedojlmjepoimbfcafopimdg?hl=zh-CN">MarkdownViewer</a></p><blockquote><p>勾选 “允许访问文件 URL”</p></blockquote></li><li><p>在浏览器地址栏粘贴相应的 .md本地文件地址，例如：<code>C:\Users\user\Desktop\markdown.md</code>，即可阅读.md文件。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301141825719.png" /></p></li></ol><h1 id="markdown-编辑器推荐">Markdown 编辑器推荐</h1><ol type="1"><li><p>平台集成工具：各大论坛、社区平台自带写作工具，你可以直接在知乎、简书、CSDN等论坛社区创作。</p></li><li><p><a href="https://www.typora.io/">Typora</a></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/tyu.png" /></p><p>Typora 是一款小巧、轻量的 Markdown编辑器，它的特点是所见即所得，能够对你编辑的内容进行实时预览。支持多种公式类型，支持 TOC等标签。可以轻松添加标题、行内代码、内联格式、公式、图像。</p></li><li><p><a href="https://code.visualstudio.com/">Visual StudioCode</a></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/vs.jpg" /></p><p>支持几乎所有的语言，拥有它，你就拥有了全世界！用它写 Markdown文档只是冰山一角。</p><blockquote><p>VSCode 默认支持Markdown，只需要安装一个预览插件：<code>Markdown Preview Enhanced</code>或 <code>Markdown All in One</code></p></blockquote></li></ol><hr /><blockquote><p>支持 Markdown的编辑器太多，有插件、独立软件等各种形式，功能也不完全一致。有的用于基本写作，有的用来写代码，有的只是博客平台配套的编辑器。这里仅列举两款编辑器。</p></blockquote><hr /><h1 id="关于-markdown-笔记插入图片的问题">关于 Markdown笔记插入图片的问题</h1><p>Markdown 笔记插入图片，基本有以下 3 种方式：</p><ol type="1"><li><p>插入本地图片</p><ul><li><p>使用相对路径</p><p>例如一个名为 1.png 的图片和 .md文件放在同一目录下，你就可以用这种方式插入图片:<code>![](1.ipg)</code></p></li><li><p>使用绝对路径，不推荐。(如 <code>![](C:\1.png)</code>)</p></li></ul><blockquote><p>缺点是不灵活、不好分享，本地图片的路径更改或丢失都会造成 Markdown文件调不出图。</p></blockquote></li><li><p>使用图床工具</p><p>图床一般是指储存图片的服务器，专门存储图片，上传后就可以获得图片的对外链接。</p><p>比如 <a href="http://www.superbed.cn/">聚合图床</a></p><blockquote><p>免费图床只需上传图片，就可以生成外链，很方便地插入 Markdown。</p><p>但是很多免费图床存在服务器不稳定、网站倒闭等隐患，往往不能长久存在！</p></blockquote></li><li><p>利用 GitHub 存储图片，在 Markdown 中引用图片链接</p><ul><li><p>将需要用到的图片上传至 git 仓库；</p></li><li><p>在仓库根目录下建立文件夹，用于存储图片。</p></li></ul><blockquote><p>如果你使用 GitHub Pages 搭建了自己的博客，当然这种方式更加方便。</p><p>详细教程，请看我的另一篇博客：</p><p><ahref="https://luminous-ee.github.io/2023/01/15/Github-jsDelivr-PicGo%E6%90%AD%E5%BB%BA%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/">Github+jsDelivr+PicGo，搭建高速稳定免费的个人图床</a></p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gridea+GitHub Pages搭建个人静态博客</title>
    <link href="/2023/01/13/Gridea-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/01/13/Gridea-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="grideagithub-pages搭建">Gridea+GitHub Pages搭建</h1><ol type="1"><li><p>创建并登录你的 GitHub 账号。</p><p><a href="https://github.com/">GitHub</a></p></li><li><p>创建一个公开仓库，名为<code>xxx.github.io</code>。（xxx为你的GitHub 用户名）</p><blockquote><p>选择 <code>Public</code>（公开仓库）</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/g1_LI.jpg"alt="avater" /><figcaption aria-hidden="true">avater</figcaption></figure></li><li><p>进入账户设置:</p><ul><li><p><code>Settings</code>-&gt;<code>Developer settings</code>-&gt;<code>Personal access tokens</code>-&gt;生成新的token</p></li><li><p><code>Note</code>做一些描述，勾选上 <code>repo</code>的相关权限，即可生成一个 Token。如下图：</p></li></ul><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/g2.png" /></p><blockquote><p>注意：生成之后记得把 Token复制到你的本地，因为一旦关闭网页将不能再看到它。</p></blockquote></li></ol><h1 id="开始gridea配置">开始Gridea配置</h1><ol type="1"><li><p>Gridea 进行远程设置</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/g3.png" /></p></li><li><p>点击「检测远程链接」，进行配置检查。</p></li><li><p>点击 Gridea 中的<code>同步</code>按钮即可。</p><blockquote><p>初次部署等待几分钟，之后就可以去浏览器访问你的域名（即<code>xxx.github.io</code>）</p></blockquote></li><li><p>你可以做一些自定义配置</p><ul><li><p>自定义菜单</p></li><li><p>任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p></li></ul><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/g4.png" /></p></li></ol><h1 id="开启评论功能">开启评论功能</h1><p>Gridea 支持 Gitalk 和 Disqus 两种评论系统，这里介绍 Gitalk 评论。</p><blockquote><p>Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。</p></blockquote><ol type="1"><li><p>点此注册：<ahref="https://github.com/settings/applications/new">Register a new OAuthapplication</a></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/g5.png" /></p></li><li><p>将 Client ID 和 Client Secret 复制保存到本地</p><blockquote><p>请务必现在复制您的Client Secret，关闭网页后你再也看不到它了。</p></blockquote></li><li><p>在Gridea中设置、保存、同步，评论功能开启。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/g6.png" /></p></li></ol><h1 id="现在开启你的博客之旅">现在，开启你的博客之旅。</h1>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/2022/12/11/hello-hexo/"/>
    <url>/2022/12/11/hello-hexo/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre></div><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello-gridea</title>
    <link href="/2022/12/11/hello-gridea/"/>
    <url>/2022/12/11/hello-gridea/</url>
    
    <content type="html"><![CDATA[<p>👏 欢迎使用 <strong>Gridea</strong> ！<br />✍️ <strong>Gridea</strong>一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意......</p><span id="more"></span><p><a href="https://github.com/getgridea/gridea">Github</a><br /><a href="https://gridea.dev/">Gridea 主页</a><br /><a href="http://fehey.com/">示例网站</a></p><h2 id="特性">特性👇</h2><p>📝 你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p><p>🌉 你可以给文章配上精美的封面图和在文章任意位置插入图片</p><p>🏷️ 你可以对文章进行标签分组</p><p>📋 你可以自定义菜单，甚至可以创建外部链接菜单</p><p>💻 你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或<strong>Linux</strong> 设备上使用此客户端</p><p>🌎 你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>CodingPages</strong> 向世界展示，未来将支持更多平台</p><p>💬 你可以进行简单的配置，接入 <ahref="https://github.com/gitalk/gitalk">Gitalk</a> 或 <ahref="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p><p>🇬🇧 你可以使用<strong>中文简体</strong>或<strong>英语</strong></p><p>🌁你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p><p>🖥 你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox等进行多设备同步</p><p>🌱 当然 <strong>Gridea</strong>还很年轻，有很多不足，但请相信，它会不停向前 🏃</p><p>未来，它一定会成为你离不开的伙伴</p><p>尽情发挥你的才华吧！</p><p>😘 Enjoy~</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
