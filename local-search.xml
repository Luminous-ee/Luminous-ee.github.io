<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python基础（三）：程序控制结构</title>
    <link href="/2023/01/23/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
    <url>/2023/01/23/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="程序的控制结构">程序的控制结构</h1><h2 id="顺序结构">顺序结构</h2><h2 id="分支结构">分支结构</h2><ol type="1"><li><p>单分支(<code>if</code>)、二分支(<code>if、else</code>)、多分支(<code>if、elif、else</code>)</p><ul><li><p>二分支的<em>紧凑形式</em>：<code>&lt;表达式1&gt; if &lt;条件&gt; else &lt;表达式2&gt;</code></p><blockquote><p>例如：<code>print("猜&#123;&#125;了".format("对" if guess == 99 else "错"))</code></p></blockquote></li></ul></li><li><p>条件判断及组合</p><ul><li><p><code>&gt;、&gt;=、&lt;、&lt;=、==、!=</code></p></li><li><p><code>and</code>(与)、<code>or</code>(或)、<code>not</code>(非)</p></li></ul></li><li><p>异常处理</p><ul><li><code>try</code>、<code>except</code></li></ul></li></ol><h2 id="循环结构">循环结构</h2><ol type="1"><li><p>遍历循环</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> &lt;循环变量&gt; <span class="hljs-keyword">in</span> &lt;遍历结构&gt;:    &lt;语句块&gt;</code></pre></div></p><ul><li><p>计数循环</p><blockquote><p><code>for i in range(n):</code></p></blockquote></li><li><p>字符串遍历循环</p><blockquote><p><code>for c in str:</code></p></blockquote></li><li><p>列表遍历循环</p><blockquote><p><code>for l in list:</code></p></blockquote></li><li><p>文件遍历循环</p><blockquote><p><code>for line in fi:</code></p><p><code>fi</code> 是文件标识符，遍历文件每一行</p></blockquote></li></ul></li><li><p>无限循环(条件控制的循环)</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">while</span> &lt;条件&gt;:    &lt;语句块&gt;</code></pre></div></p></li><li><p>循环控制保留字</p><ul><li><code>break</code>：跳出当前(<em>最内层</em>)循环</li><li><code>continue</code>：跳过本次循环，继续下次循环</li></ul></li><li><p>循环高级用法：<strong>循环与 else 组合</strong></p></li></ol><h2 id="思维导图">思维导图</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301231416023.png" /></p><h1 id="tips">Tips</h1><ol type="1"><li><p>异常处理</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301231414224.png" /></p><ul><li><p><strong>try/except</strong>：异常捕捉</p><ul><li>如何执行：<ul><li>首先执行 try 子句，如果没有异常发生，try 子句执行后结束。</li><li>如果在执行 try 子句时发生了异常， try 子句余下部分不再执行，转到except 子句捕捉异常。如果异常类型和 except 之后的名称相符，执行对应的except 子句。</li></ul></li><li>一个 try 语句可以包含多个 except子句，分别来处理不同的特定异常。<strong>最多只有一个分支会被执行。</strong></li><li>一个 except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。</li><li>最后一个 except 子句可以忽略异常的名称。</li></ul><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 使用举例</span><span class="hljs-keyword">try</span>:    &lt;语句块&gt;<span class="hljs-keyword">except</span> OSError:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;OS error&quot;</span>)<span class="hljs-keyword">except</span> ValueError:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Value error&quot;</span>)<span class="hljs-keyword">except</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Unexpected error:&quot;</span>)</code></pre></div></p></li><li><p><strong>try/except...else</strong>：</p><ul><li><strong>else</strong> 子句可选，放在所有的 except 子句之后</li><li>在 try 子句没有发生任何异常的时候执行。</li></ul></li><li><p><strong>try-finally</strong>：无论是否发生异常都将执行最后的代码。</p></li></ul><blockquote><p>抛出异常：Python 使用 <code>raise</code> 语句抛出一个指定的异常。</p></blockquote></li><li><p>循环与 else</p><ul><li><p>for 循环与 else 组合</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># for 循环与 else</span><span class="hljs-comment"># else 在 for 循环正常循环结束时被执行，被 break 终止时不执行</span><span class="hljs-comment"># 格式：</span><span class="hljs-keyword">for</span> &lt;variable&gt; <span class="hljs-keyword">in</span> &lt;sequence&gt;:    &lt;statements&gt;<span class="hljs-keyword">else</span>:    &lt;statements&gt;<span class="hljs-comment"># 实例1：正常循环结束</span>sites = [<span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>]<span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> sites:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;循环数据 &quot;</span> + s)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有循环数据!&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成循环!&quot;</span>)<span class="hljs-comment"># 输出结果</span>循环数据 Baidu循环数据 Google循环数据 Taobao没有循环数据!完成循环!<span class="hljs-comment"># 实例2：被 break 终止</span>sites = [<span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>]<span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> sites:    <span class="hljs-keyword">if</span> s == <span class="hljs-string">&quot;Google&quot;</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;跳出!&quot;</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;循环数据 &quot;</span> + s)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有循环数据!&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成循环!&quot;</span>)<span class="hljs-comment"># 输出结果</span>循环数据 Baidu跳出!完成循环!</code></pre></div></p></li><li><p>while 循环与 else 组合</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># while 循环与 else</span><span class="hljs-comment"># 如果 while 后面的条件语句为 false 时，则执行 else 的语句块。</span><span class="hljs-comment"># 格式：</span><span class="hljs-keyword">while</span> &lt;expr&gt;:    &lt;statement(s)&gt;<span class="hljs-keyword">else</span>:    &lt;additional_statement(s)&gt;<span class="hljs-comment"># 实例</span>count = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">2</span>:   <span class="hljs-built_in">print</span> (count, <span class="hljs-string">&quot; 小于 2&quot;</span>)   count += <span class="hljs-number">1</span><span class="hljs-keyword">else</span>:   <span class="hljs-built_in">print</span> (count, <span class="hljs-string">&quot; 大于或等于 2&quot;</span>)<span class="hljs-comment"># 输出结果</span><span class="hljs-number">0</span>  小于 <span class="hljs-number">2</span><span class="hljs-number">1</span>  小于 <span class="hljs-number">2</span><span class="hljs-number">2</span>  大于或等于 <span class="hljs-number">2</span></code></pre></div></p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 与 Packages（二）：time库</title>
    <link href="/2023/01/23/Python-%E4%B8%8E-Packages%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9Atime%E5%BA%93/"/>
    <url>/2023/01/23/Python-%E4%B8%8E-Packages%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9Atime%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>该模块提供各种与时间相关的功能。</p><blockquote><p>尽管此模块始终可用，但并非所有函数在所有平台上都可用。此模块中定义的大多数函数调用具有相同名称的C 库函数。</p></blockquote><h1 id="三类函数">三类函数</h1><ol type="1"><li><p>时间获取</p><table><thead><tr class="header"><th><code>time.time()</code></th><th>以浮点数形式，返回自 epoch以来的时间（以秒为单位）<code>the epoch is January 1, 1970, 00:00:00 (UTC).</code></th></tr></thead><tbody><tr class="odd"><td><code>time.ctime()</code></td><td>获取当前时间，以<em>字符串</em>形式表示</td></tr><tr class="even"><td><code>time.gmtime()</code></td><td>获取当前时间，转换为 UTC 中的 <code>struct_time</code></td></tr><tr class="odd"><td><code>time.localtime()</code></td><td>与 <code>time.gmtime()</code> 类似，但转换为<em>本地时间</em></td></tr></tbody></table></li><li><p>时间格式化</p><table><thead><tr class="header"><th><code>time.strftime(format[,t])</code></th><th>将获取的 t转换为指定格式的字符串。<code>time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.gmtime())</code></th></tr></thead><tbody><tr class="odd"><td><code>time.strptime(string[,format])</code></td><td>根据格式分析表示时间的字符串。<code>time.strptime("30 Nov 00", "%d %b %y")</code></td></tr></tbody></table></li><li><p>计时</p><table><thead><tr class="header"><th><code>time.perf_counter()</code></th><th>返回计数器的值，用于测量较短的持续时间。返回值的参考点未定义，因此只有两次调用的结果之差是有效的。</th></tr></thead><tbody><tr class="odd"><td><code>time.sleep(secs)</code></td><td>在给定的秒数内暂停执行调用线程。</td></tr></tbody></table></li></ol><h1 id="tips">Tips</h1><ol type="1"><li><p>time 库-帮助文档</p><p><a href="https://docs.python.org/3.9/library/time.html">time - Timeaccess and conversions</a></p></li><li><p>Python 给两个变量赋值</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 方式1</span>na = <span class="hljs-string">&quot;偏瘦&quot;</span>;ni = <span class="hljs-string">&quot;偏瘦&quot;</span><span class="hljs-comment"># 方式2</span>na,ni = <span class="hljs-string">&quot;偏瘦&quot;</span>,<span class="hljs-string">&quot;偏瘦&quot;</span>a,b = <span class="hljs-number">1</span>,<span class="hljs-number">2</span>x,y = r.random(),r.random()height,weight = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>())</code></pre></div></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础（二）：基本数据类型</title>
    <link href="/2023/01/22/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/01/22/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="基本数据类型">基本数据类型</h1><h2 id="数字类型及操作">数字类型及操作</h2><ol type="1"><li><p>数字类型</p><blockquote><p>数字类型可以自动“拓宽”：<em>整数→浮点数→复数</em></p></blockquote><ul><li><p>整数</p><blockquote><p>4 种进制表示（十进制、二进制、八进制、十六进制）</p></blockquote></li><li><p>浮点数</p><blockquote><ol type="a"><li><p>浮点数运算存在不确定尾数</p></li><li><p>浮点数可采用科学记数法表示</p></li></ol></blockquote></li><li><p>复数</p></li></ul></li><li><p>数值运算操作符</p><ul><li><p><code>x+y</code> | <code>x-y</code> | <code>x*y</code> |<code>x/y</code> | <code>x//y</code> | <code>x%y</code> |<code>x**y</code> | <code>+x</code> | <code>-x</code></p></li><li><p><code>x op y</code></p><blockquote><p>op为二元操作符，例如 <code>x += y</code></p></blockquote></li></ul></li><li><p>数值运算函数</p><ul><li><p><code>abs(x) | pow(x,y[,z]) | divmod(x,y) | round(x,[,d]) | max(a,b,...) | min(a,b,...)</code></p><blockquote><ol type="a"><li><p><code>[ ]</code> 表示参数可以省略</p></li><li><p><code>divmod(x,y)</code>同时输出<strong>商和余数</strong></p></li><li><p><code>pow(x,y[,z])</code> 计算 <code>(x**y)%z</code></p></li><li><p><code>round(x[,d])</code> 四舍五入，d 是保留小数位数</p></li></ol></blockquote></li><li><p><code>int(x) | float(x) | complex(x)</code></p><blockquote><p>数字类型的显式转换</p></blockquote></li></ul></li></ol><h2 id="字符串类型及操作">字符串类型及操作</h2><ol type="1"><li><p>字符串类型</p><ul><li><p>如何表示</p><blockquote><p>一对单引号，一对双引号，一对三单引号，一对三双引号</p></blockquote></li><li><p>操作符：<code>x+y | x*n 或 n*x | x in s</code></p><blockquote><ol type="1"><li><p><code>x*n</code> 或 <code>n*x</code>：复制 n 次字符串 x</p></li><li><p><code>x in s</code>：判断 x 是 s 的子串</p></li></ol></blockquote></li></ul></li><li><p>处理字符串的函数</p><ul><li><p><code>len(s) | str(x) | hex(x) | oct(x)</code></p><blockquote><p><code>hex(x)</code> 与 <code>oct(x)</code>：整数 x的八进制与十六进制小写形式字符串。</p></blockquote></li><li><p><code>chr(u) | ord(x)</code></p><blockquote><ol type="1"><li><p>u 为 Unicode 编码，<code>chr(u)</code> 返回对应的字符</p></li><li><p>x 为字符，<code>ord(x)</code> 返回对应的 Unicode 编码</p></li></ol></blockquote></li></ul></li><li><p>字符串处理方法</p><ul><li><p><code>.lower() | .upper() | .split(sep) | .count(sub) | .replace(old,new)</code></p></li><li><p><code>.center(width[,fillchar]) | .strip(chars) | .join(iter)</code></p></li><li><p>字符串格式化</p><ul><li><p><code>&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</code></p></li><li><p>槽： 用 <code>&#123;&#125;</code> 表示槽，如下图：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301222146755.jpg" /></p><ul><li><p>槽内部的写法：<code>&#123;&lt;参数序号&gt;:&lt;格式控制标记&gt;&#125;</code></p></li><li><p>槽内部的格式控制标记：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301222147456.jpg" /></p></li></ul></li></ul></li></ul></li></ol><h2 id="思维导图">思维导图</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301222147552.png" /></p><h1 id="tips">Tips</h1><ol type="1"><li><p>字符串处理方法</p><table><thead><tr class="header"><th><code>.lower()</code> 与 <code>.upper()</code></th><th>返回字符串的副本，全部字符转为小写/大写</th></tr></thead><tbody><tr class="odd"><td><code>.count(sub)</code></td><td>返回子串sub在str中出现的次数</td></tr><tr class="even"><td><code>.replace(old,new)</code></td><td>返回字符串的副本，所有old子串被替换为new</td></tr><tr class="odd"><td><code>.center(width[,fillchar])</code></td><td>让字符串根据宽度width居中，fillchar是用于填充的符号</td></tr><tr class="even"><td><code>.strip(chars)</code></td><td>删除字符串两端的空格或指定字符chars。<code>"123abob321".strip('12')</code>结果为<code>3abob3</code></td></tr><tr class="odd"><td><code>.split(sep)</code></td><td>以sep分割字符串，返回列表，<code>"A,B,C".split(",")</code>结果为<code>['A','B','C']</code></td></tr><tr class="even"><td><code>.join(iter)</code></td><td>联结字符串元素。<code>"-".join("12345")</code>结果为<code>1-2-3-4-5</code></td></tr></tbody></table><blockquote><p>split：分开，join：联合</p></blockquote></li><li><p>字符串的格式化输出<code>.format()</code>，对槽的内部控制格式加深理解</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301222147456.jpg" /></p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#eg1</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;工作日的努力参数是: &#123;:.3f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dayfac))<span class="hljs-comment">#eg2</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;</span>.<span class="hljs-built_in">format</span>(c,a,b,d) ,end=<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment">#eg3</span>N = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>())<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,N+<span class="hljs-number">1</span>,<span class="hljs-number">2</span>): <span class="hljs-comment"># 从1到N，步长为2</span>    <span class="hljs-comment">#print((&#x27;*&#x27;*i).center(N,&#x27; &#x27;)) # 一种方式</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:^&#123;&#125;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;*&#x27;</span>*i,N)) <span class="hljs-comment"># 另一种方式</span>    <span class="hljs-comment"># 注意如果用print(&quot;&#123;:^N&#125;&quot;.format(&#x27;*&#x27;*i))是错误的</span></code></pre></div></p></li><li><p>Python 没有字符类型，不能直接进行字符加减运算，需借助<code>chr(u)</code> 和 <code>ord(x)</code> 函数</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#凯撒密码加密</span>plaintext = <span class="hljs-built_in">input</span>()ciphertext = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> plaintext:    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span> &lt;= p &lt;= <span class="hljs-string">&#x27;z&#x27;</span>: <span class="hljs-comment"># 字符串比较</span>        **c = <span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">ord</span>(p)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))+<span class="hljs-number">3</span>)%<span class="hljs-number">26</span>+<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))**    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;A&#x27;</span> &lt;= p &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>: <span class="hljs-comment"># 字符串比较</span>        **c = <span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">ord</span>(p)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))+<span class="hljs-number">3</span>)%<span class="hljs-number">26</span>+<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))**    <span class="hljs-keyword">else</span>:        c = p    ciphertext += c<span class="hljs-built_in">print</span>(ciphertext)</code></pre></div></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 与 Packages（一）：turtle库</title>
    <link href="/2023/01/20/Python-%E4%B8%8E-Packages%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9Aturtle%E5%BA%93/"/>
    <url>/2023/01/20/Python-%E4%B8%8E-Packages%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9Aturtle%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="基本绘图体系turtle">基本绘图体系——turtle</h1><p><img src="https://docs.python.org/3.9/_images/turtle-star.png" /></p><h2 id="turtle库介绍">turtle库介绍</h2><ol type="1"><li><p>窗体</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301202242318.jpg" /></p><blockquote><p><code>turtle.setup(width,height,startx,starty)</code></p></blockquote></li><li><p>坐标</p><ul><li><p>绝对坐标</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301202242075.jpg" /></p><blockquote><p><code>turtle.goto(x,y)</code></p></blockquote></li><li><p>海龟坐标</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301202243067.jpg" /></p></li><li><p>角度坐标(绝对角度)</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301202243987.jpg" /></p><blockquote><p><code>turtle.seth(angle)</code></p></blockquote></li></ul></li><li><p>色彩</p></li></ol><h2 id="turtle库函数">turtle库函数</h2><ol type="1"><li><p>画笔控制</p><ul><li><p><code>penup() | pu()</code> 抬笔</p></li><li><p><code>pendown() | pd()</code> 落笔</p></li><li><p><code>pensize() | width()</code> 粗细</p></li><li><p><code>pencolor()</code> 颜色</p><blockquote><p>pencolor()的3种形式</p><blockquote><p>pencolor("purple")</p><p>pencolor(r,g,b)</p><p>pencolor((r,g,b))</p></blockquote></blockquote></li></ul></li><li><p>运动控制</p><ul><li><p><code>forward() | fd()</code></p><blockquote><p>海龟前进 distance 指定的距离，方向为海龟的朝向。</p></blockquote></li><li><p><code>backward() | back() | bk()</code></p><blockquote><p>海龟后退 distance 指定的距离，方向与海龟的朝向相反。</p></blockquote></li><li><p><code>circle()</code></p><blockquote><p><code>circle(radius, extent)</code> 绘制一个 radius指定半径的圆。</p><p>圆心在海龟左边 radius 个单位；extent为一个夹角，用来决定绘制圆的一部分。</p></blockquote></li><li><p><code>goto() | setpos() | setposition()</code></p><blockquote><p>海龟移动到一个绝对坐标(x,y)。如果画笔落下将会画线。不改变海龟的朝向。</p></blockquote></li><li><p><code>home()</code></p><blockquote><p>海龟移至初始坐标 (0,0)，并设置朝向为初始方向。</p></blockquote></li><li><p><code>speed()</code></p><blockquote><p>设置海龟移动的速度为 0..10 表示的整型数值。</p><p>速度值从 1 到 10，画线和海龟转向的动画效果逐级加快。speed = 0表示没有 动画效果。</p></blockquote></li></ul></li><li><p>方向控制</p><ul><li><p><code>setheading() | seth()</code></p><blockquote><p>设置海龟的朝向为 angle。angle 为绝对角度。</p></blockquote></li><li><p><code>right() | rt()</code></p><blockquote><p>海龟右转 angle 个单位。(单位默认为角度)</p></blockquote></li><li><p><code>left() | lt()</code></p><blockquote><p>海龟左转 angle 个单位。</p></blockquote></li></ul></li></ol><blockquote><p>思维导图</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301202244216.png" /></p></blockquote><h1 id="tips">Tips</h1><ol type="1"><li><p>turtle 库</p><p>turtle 库是 Python 的标准库之一，属于入门级的图形绘制函数库；</p><blockquote><p>Python 计算生态 = 标准库 + 第三方库</p><blockquote><p>标准库：随 Pyhton 解释器直接安装的功能模块。</p><p>第三方库：需要经过安装才能使用的功能模块。</p></blockquote></blockquote><p>帮助文档：<ahref="https://docs.python.org/3.9/library/turtle.html">turtle - Turtlegraphics</a></p></li><li><p>导入库的方法</p><ul><li><code>import turtle</code> 或 <code>from turtle import *</code><ul><li>相同：都是引入 turtle 库中的所有方法</li><li>不同：第一种方式下需使用<code>turtle.fd()</code>，第二种方式直接使用 <code>fd()</code>即可。</li></ul></li><li><code>import turtle as t</code></li></ul></li><li><p>循环语句与 range() 函数</p><ul><li><p><code>for</code> 循环</p><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#一般格式</span><span class="hljs-keyword">for</span> &lt;variable&gt; <span class="hljs-keyword">in</span> &lt;sequence&gt;:&lt;statements&gt;<span class="hljs-comment">#实例</span>&gt;&gt;&gt;languages = [<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;C++&quot;</span>, <span class="hljs-string">&quot;Python&quot;</span>] <span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> languages:<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span> (x)<span class="hljs-meta">... </span>CC++Python</code></pre></div></p></li><li><p><code>range()</code> 函数：产生循环计数序列</p><ul><li><code>range(n)</code>，产生 0 到 n-1的整数序列，<code>for i in range(5):</code></li><li><code>range(m,n)</code>，产生 m 到 n-1的整数序列，<code>for i in range(5,9) :</code></li><li><code>range(m,n,q)</code>，产生 m 到 n-1 的整数序列，步长为q，<code>for i in range(0,11,2) :</code></li></ul></li></ul></li></ol><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301202312733.jpg" /></p>]]></content>
    
    
    <categories>
      
      <category>Python库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础（一）：基本语法元素</title>
    <link href="/2023/01/19/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%85%83%E7%B4%A0/"/>
    <url>/2023/01/19/Python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="初识-python">初识 Python</h1><p><imgsrc="https://www.python.org/static/img/python-logo@2x.png" /></p><h2 id="官方网站">官方网站</h2><ul><li>Python是一种容易学习的强大编程语言。它具有高效的高级数据结构和简单有效的面向对象编程方法。</li><li>Python优雅的语法和动态类型，以及它的<strong>解释</strong>性质，使其成为大多数平台上许多领域用于编写脚本和快速应用程序开发的理想语言。</li><li>Python解释器和广泛的标准库以源代码或二进制形式免费提供，适用于所有主要平台，可以从Python 网站 <ahref="https://www.python.org/">https://www.python.org/</a>免费获得。该网站还包含许多免费第三方 Python模块、程序和工具的分发版，以及其他文档。</li><li>有关标准对象和模块的描述，请参见 <ahref="https://docs.python.org/3/library/index.html#library-index">Python标准库</a>。<ahref="https://docs.python.org/3/reference/index.html#reference-index">Python语言参考</a>提供了该语言更正式的定义。</li></ul><h2 id="推荐课程">推荐课程</h2><p><ahref="https://www.icourse163.org/course/BIT-268001">Python语言程序设计_北京理工大学_嵩天</a></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301191852452.png" /></p><blockquote><p>计算机是运算工具，更是创新平台，高效有趣地利用计算机需要更简洁实用的编程语言。Python简洁却强大、简单却专业，它是当今世界最受欢迎的编程语言，学好它终身受用。请跟随我们，学习并掌握Python语言，一起动起来，站在风口、享受创新！</p><p>—— 课程团队</p></blockquote><h3 id="python123"><ahref="https://python123.io/index">Python123</a></h3><p>Python123 对应本课程链接：<ahref="https://python123.io/index/courses/7752">https://python123.io/index/courses/7752</a></p><blockquote><p>Python123 是 Python语言的学习平台，本课程相关作业、练习和考试都在该平台完成。</p></blockquote><h1 id="基本语法元素">基本语法元素</h1><h2 id="导图">导图</h2><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301191521845.png" /></p><h2 id="tips">Tips</h2><ol type="1"><li><p><code>input()</code>函数接收任意类型输入，将所有输入默认为字符串处理，并返回字符串类型。</p><blockquote><p><code>input()</code>可以接收多个值：<code>a,b,c = (input().split())</code></p></blockquote><p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 将所有输入默认为单个字符串处理</span><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-built_in">input</span>()<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(s)&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt; <span class="hljs-comment"># s为一个字符串&quot;1,2,3,4,5,6&quot;</span><span class="hljs-comment"># 可以接收多个值</span><span class="hljs-meta">&gt;&gt;&gt; </span>a,b,c=<span class="hljs-built_in">input</span>().split(<span class="hljs-string">&quot;,&quot;</span>) <span class="hljs-comment"># 接收3个值，以逗号分隔</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a is &#123;&#125;, b is &#123;&#125;, c is &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(a,b,c))a <span class="hljs-keyword">is</span> <span class="hljs-number">1</span>, b <span class="hljs-keyword">is</span> <span class="hljs-number">2</span>, c <span class="hljs-keyword">is</span> <span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(a)&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<span class="hljs-comment"># 如果接收3个但输入4个，产生ValueError</span><span class="hljs-meta">&gt;&gt;&gt; </span>a,b,c=<span class="hljs-built_in">input</span>().split(<span class="hljs-string">&quot;,&quot;</span>)<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>Traceback (most recent call last):  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;ValueError: too many values to unpack (expected <span class="hljs-number">3</span>)</code></pre></div></p></li><li><p><code>print()</code>函数默认输出是换行的，如果要实现不换行需要在变量末尾加上 <code>end=""</code></p><p><div class="code-wrapper"><pre><code class="hljs python">    array = <span class="hljs-string">&quot;零一二三四五六七八九&quot;</span>    num = <span class="hljs-built_in">input</span>()    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num:        <span class="hljs-built_in">print</span>(array[<span class="hljs-built_in">eval</span>(i)],end = <span class="hljs-string">&quot;&quot;</span>)    ```    <span class="hljs-number">3.</span> `<span class="hljs-built_in">eval</span>()` 函数用来执行一个 **字符串表达式**，并返回表达式的计算结果。        ```python    &gt;&gt;&gt; <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;pow(2,2)&#x27;</span>)    <span class="hljs-number">4</span>    &gt;&gt;&gt; <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;2 +    2&#x27;</span>)    <span class="hljs-number">4</span>    &gt;&gt;&gt; s = <span class="hljs-built_in">input</span>()    **<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>**    &gt;&gt;&gt; <span class="hljs-built_in">type</span>(s)    &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;  <span class="hljs-comment"># s为一个字符串&quot;1,2,3,4,5,6&quot;</span>    &gt;&gt;&gt; <span class="hljs-built_in">eval</span>(s) <span class="hljs-comment"># 执行这个字符串表达式</span>    (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)    &gt;&gt;&gt; <span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(s))    &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt; <span class="hljs-comment"># eval()函数将其解析为元组</span>    &gt;&gt;&gt; s = <span class="hljs-built_in">input</span>()    **&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>&#125;**    &gt;&gt;&gt; <span class="hljs-built_in">type</span>(s)    &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt; <span class="hljs-comment"># s为一个字符串&quot;&#123;&quot;a&quot;: 1, &quot;b&quot;: 2&#125;&quot;</span>    &gt;&gt;&gt; <span class="hljs-built_in">eval</span>(s)    &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;    &gt;&gt;&gt; <span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(s))    &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt; <span class="hljs-comment"># eval()函数将其解析为字典</span></code></pre></div></p></li><li><p>Python 保留字</p><blockquote><p>35个保留字</p></blockquote><table><thead><tr class="header"><th>global</th><th>if</th><th>is</th><th>True</th><th>class</th><th>except</th></tr></thead><tbody><tr class="odd"><td>import</td><td>elif</td><td>not</td><td>False</td><td>assert</td><td>finally</td></tr><tr class="even"><td>as</td><td>else</td><td>and</td><td>None</td><td>with</td><td>pass</td></tr><tr class="odd"><td>from</td><td>for</td><td>or</td><td>def</td><td>raise</td><td>try</td></tr><tr class="even"><td>break</td><td>while</td><td>in</td><td>del</td><td>yield</td><td>async</td></tr><tr class="odd"><td>continue</td><td></td><td>lambda</td><td>return</td><td>nonlocal</td><td>await</td></tr></tbody></table></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你的生产力工具集-uTools</title>
    <link href="/2023/01/15/%E4%BD%A0%E7%9A%84%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7%E9%9B%86-uTools/"/>
    <url>/2023/01/15/%E4%BD%A0%E7%9A%84%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7%E9%9B%86-uTools/</url>
    
    <content type="html"><![CDATA[<h1 id="新一代效率工具平台">新一代效率工具平台</h1><p><img src="https://res.u-tools.cn/website/utools.png" /></p><h2 id="介绍">介绍</h2><ul><li>uTools 是一个极简、集成插件、跨平台的桌面工具。</li><li>自由集成丰富插件，快速匹配「场景功能」，用完即走。</li><li>当你熟悉它后，能够提高生产效率，让你更加专注地改变世界。</li></ul><blockquote><p>官网：<a href="https://www.u.tools/">uTools</a></p></blockquote><p><ahref="https://www.bilibili.com/video/BV1eg411M7TZ?share_source=copy_web">观看uTools 的介绍视频</a></p><iframe src="//player.bilibili.com/player.html?aid=504310921&amp;bvid=BV1eg411M7TZ&amp;cid=374628689&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><h2 id="关键功能">关键功能</h2><ol type="1"><li><p>通过快捷键『Alt+Space』，快速唤起 utools 窗口。</p><p>支持英文、英文驼峰、中文拼音、拼音首字母来快速搜索，你只要记得一个大概的名字、拼音、英文缩写，直接输入快速找到你想要的。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/uTools.png"alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption></figure></li><li><p>选中内容，单击「鼠标」中键，弹出超级面板</p><p>你只需要安装一些很小但非常实用的插件，超级面板会根据当前选择的内容（文本、截图、文件、文件夹）自动匹配已安装的插件供你选择。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/utools1.png"alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption></figure></li><li><p>一切皆插件，丰富的插件市场任你选择</p><ul><li>uTools 最大的特点就是拥有强大的插件系统。</li><li>现在已有 400+插件，每个插件解决一个具体场景的问题，简洁美观、即用即走。</li><li>输入 <code>插件市场</code>进入插件管理，根据自己的需求挑选安装，组合成自己最称手的工具集合，为各种日常操作提供便利。</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/utools2.png"alt="avatar" /><figcaption aria-hidden="true">avatar</figcaption></figure></li></ol><blockquote><p>更多内容请参考：<ahref="https://www.u.tools/docs/guide/about-uTools.html#utools-%E6%98%AF%E4%BB%80%E4%B9%88">帮助教程</a></p></blockquote><h1 id="utools-插件推荐">uTools 插件推荐</h1><p>在窗口输入<code>插件</code>，选择<code>插件市场</code>，进入并开始挑选你需要的插件。</p><ol type="1"><li><p>聚合翻译</p><p>这个插件整合有道翻译、腾讯翻译、百度翻译、搜狗翻译、谷歌翻译、必应翻译、DeepL翻译、彩云小译等，你可以自由选择。</p><p>关键字： <code>translate/翻译</code></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/utools3.png" /></p></li><li><p>超级剪切板</p><p>记录剪贴板历史并保存到本地，支持文字/图片/文件，随时可以查找并粘贴。</p><p>关键字：<code>剪切</code></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/4.png" /></p></li><li><p>Markdown笔记</p><ul><li>与传统富文本编辑方式结合，实时预览、存储</li><li>代码块支持 164 种语言</li><li>支持 TODO 任务列表</li><li>支持 KaTex 数学公式</li><li>导出 Markdown、PDF、HTML、图片</li></ul><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/5.png" /></p></li><li><p>JSON编辑器</p><ul><li>URL Params、XML、YAML 粘贴自动转为 JSON 格式</li><li>支持 JSON 转 XML、JSON 压缩、JSON 转义、JSON 转 TypeScript</li><li>在底部输入框使用 Javascript 语法快速对 json 数据进行过滤</li></ul><p>关键字：<code>json</code></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/6.png" /></p></li><li><p>本地搜索</p><p>插件基于 <a href="https://www.voidtools.com/zh-cn/">Everything</a>的本地搜索，内置了绿色版 Everything.</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/7.png" /></p></li><li><p>人生进度条</p><p>「人生如戏, 白驹过隙」,很有趣的插件</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/8.png" /></p></li></ol><blockquote><ul><li><p>uTools插件市场非常丰富，还有<code>图片压缩</code>、<code>批量重命名</code>、<code>备忘快贴</code>等众多好用的插件，在此不能逐一列举，更多有趣强大的插件需要你自行探索，相信一定不会让你失望！</p></li><li><p>可以说 uTools插件系统基本能解决你所想到的问题，这些插件由很多优秀的开发者在共同开发维护，如果你有相关技能，也可以加入开发者队伍！详请参见：<ahref="https://www.u.tools/docs/developer/welcome.html#plugin-json">uTools——插件开发</a></p></li><li><p>最后，感兴趣的读者可以关注 <code>uTools</code>官方公众号了解更多： <imgsrc="https://res.u-tools.cn/plugins/upload/qrcode_for_gh_91815b1958c7_258.jpg"alt="avatar" /></p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github+jsDelivr+PicGo，搭建高速稳定免费的个人图床</title>
    <link href="/2023/01/15/Github-jsDelivr-PicGo%E6%90%AD%E5%BB%BA%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2023/01/15/Github-jsDelivr-PicGo%E6%90%AD%E5%BB%BA%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="一工具介绍">一、工具介绍</h1><p>用 markdown写作，插入图片是不可避免的，图床可以方便地解决这个问题。</p><h2 id="图床">1. 图床</h2><ul><li>专门用于存储图片，生成外链，可直接插入到 Markdown 笔记中</li><li>优点：<ul><li>节省本地服务器空间</li><li>加快了图片加载速度</li><li>不用担心图片丢失</li></ul></li><li>缺点：<ul><li>部分图床收费，也有不少图床是免费的</li><li>免费图床面临不稳定、不持久、不安全的风险</li></ul></li></ul><blockquote><p>图床现状：</p><ul><li>免费图床：<a href="https://smms.app/">SM.MS</a>、<ahref="https://imgse.com/">路过图床</a>、<ahref="http://pic.xiaojianjian.net/">小贱贱图床</a>、<ahref="https://postimages.org/">Postimage</a> 等等<ul><li>无需注册，点开即用，永久储存</li><li>各有特色，各有限制，各有缺点</li></ul></li><li>大厂存储：<a href="https://www.qiniu.com/">七牛云</a>、<ahref="https://www.upyun.com/">又拍云</a>、<ahref="https://cloud.tencent.com/product/cos">腾讯云COS</a>、<ahref="https://www.aliyun.com/product/oss">阿里云OSS</a> 等<ul><li>容量限制，实名认证，域名备案</li><li>稳定、强大、可靠</li></ul></li></ul></blockquote><ul><li>综上，使用 GitHub 仓库创建一个图床，就是本文重点：稳定+免费！</li></ul><h2 id="jsdelivr">2. jsDelivr</h2><ul><li>jsDelivr 是国外一家优秀的公共 CDN服务提供商，也是首个「打通中国大陆与海外的免费 CDN 服务」。</li></ul><blockquote><p>CDN(Content Delivery Network)，即内容分发网络。</p><p>核心理念，就是将内容缓存在终端用户附近</p><p>CDN应用广泛，支持多种行业、多种场景内容加速</p></blockquote><ul><li>本篇文章只谈及利用 jsDelivr 加速 Github仓库的文件，我们可以借此搭建一个<strong>高速</strong>图床。</li></ul><h2 id="picgo">3. PicGo</h2><ul><li><p>图床工具：自动把本地图片上传到图床，并转换成链接的工具，简化操作，提高创作效率。</p></li><li><p>PicGo 是一款优秀的图床工具。用 Electron-vue开发，支持上传<strong>七牛云，又拍云，腾讯云COS，阿里云OSS，SM.MS，imgur，GitHub</strong>7种常用图床。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/picGo.png" /></p></li></ul><h1 id="二搭建步骤">二、搭建步骤</h1><h2 id="新建-github-仓库并生成-token">1. 新建 GitHub 仓库并生成Token</h2><ol type="1"><li><p>注册 <a href="https://github.com/">GitHub</a>账号，登录。</p></li><li><p>创建一个公开仓库，仓库名随意，如 <code>Img</code>，<code>ImgBed</code> &gt; 下方选择<code>Public</code></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/img1.png" /></p></li><li><p>进入账户设置:<code>Settings</code>-&gt;<code>Developer settings</code>-&gt;<code>Personal access tokens</code>-&gt;生成新的token</p><p><code>Note</code> 做一些描述，勾选上 <code>repo</code>的相关权限，即可生成一个 Token。如下图：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/img2.png" /></p><blockquote><p>注意：生成之后及时将 Token复制到你的本地，因为一旦关闭网页将不能再看到它。</p></blockquote></li></ol><h2 id="配置picgo">2. 配置picGo</h2><ol type="1"><li><p>下载 PicGo</p><p>下载地址：<ahref="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><blockquote><p>mac 用户选择 .dmg 下载，windwos 选择 .exe下载</p></blockquote><p>详细内容请参考 PicGo 文档：<ahref="https://picgo.github.io/PicGo-Doc/">https://picgo.github.io/PicGo-Doc/</a></p></li><li><p>配置环境变量</p><blockquote><p>确保你安装了 Node.js， 并且版本 &gt;= 16</p></blockquote><p>PicGo 的配置文件在不同系统里是不一样的：</p><ul><li>Windows: <code>%APPDATA%\picgo\data.json</code></li><li>Linux: <code>$XDG_CONFIG_HOME/picgo/data.json</code> 或<code>~/.config/picgo/data.json</code></li><li>macOS:<code>~/Library/Application\ Support/picgo/data.json</code></li></ul><p>例如:</p><ul><li><p>在windows里你可以在：<code>C:\Users\你的用户名\AppData\Roaming\picgo\data.json</code>找到它。</p></li><li><p>在linux里你可以在：<code>~/.config/picgo/data.json</code>里找到它。</p></li><li><p>macOS同理。</p></li></ul></li><li><p>配置picGo</p><blockquote><p>本文仅介绍 PicGo 配置 GitHub 图床，若想配置其它图床，请参考文档：<ahref="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E5%9B%BE%E5%BA%8A%E5%8C%BA">PicGo指南——配置手册——图床区</a></p></blockquote><p>GitHub 图床： <div class="code-wrapper"><pre><code class="hljs awk">&#123;<span class="hljs-string">&quot;repo&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-regexp">//</span> 仓库名，格式是username/reponame<span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-regexp">//</span> github token<span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-regexp">//</span> 自定义存储路径，比如img/<span class="hljs-string">&quot;customUrl&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-regexp">//</span> 自定义域名，注意要加http:<span class="hljs-regexp">//</span>或者https:<span class="hljs-regexp">//</span><span class="hljs-string">&quot;branch&quot;</span>: <span class="hljs-string">&quot;&quot;</span> <span class="hljs-regexp">//</span> 分支名，默认是main&#125;</code></pre></div></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/picGo%E9%85%8D%E7%BD%AE.png" /></p><ul><li><p>设定仓库名：<code>&lt;用户名/图床仓库名&gt;</code> 格式</p></li><li><p>设定分支名：<code>main</code></p></li><li><p>设定Token：粘贴之前生成的 Token</p></li><li><p>指定存储路径：如 <code>photos/</code>，会在仓库下自动创建<code>photos/</code> 文件夹，图片储存在此文件夹下</p></li><li><p>设定自定义域名：<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code></p><p>比如 <code>https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed</code></p><blockquote><p>在图片上传后，PicGo会生成图片访问链接</p><p>因为我们使用 jsDelivr 加速访问，所以设置为<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code> 格式</p></blockquote></li></ul></li></ol><h1 id="三开始使用">三、开始使用</h1><ul><li>拖拽或点击上传图片</li><li>提示成功上传到 GitHub 仓库</li><li>复制 Markdown 外链，插入 Markdown 笔记中</li></ul><blockquote><p>快速上手请参考：<ahref="https://picgo.github.io/PicGo-Doc/zh/guide/getting-started.html">PicGo指南——快速上手</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十分钟掌握 Markdown 基本语法，让你专注写作！</title>
    <link href="/2023/01/14/%E5%8D%81%E5%88%86%E9%92%9F%E6%8E%8C%E6%8F%A1Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E8%AE%A9%E4%BD%A0%E4%B8%93%E6%B3%A8%E5%86%99%E4%BD%9C/"/>
    <url>/2023/01/14/%E5%8D%81%E5%88%86%E9%92%9F%E6%8E%8C%E6%8F%A1Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E8%AE%A9%E4%BD%A0%E4%B8%93%E6%B3%A8%E5%86%99%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="那么开始用markdown写作">那么开始用markdown写作</h1><h2 id="标题">1. 标题</h2><ul><li><p>在标题文字前面加符号 <code>#</code></p><p><div class="code-wrapper"><pre><code class="hljs clean"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre></div></p></li><li><p>效果展示：</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301142122042.png"alt="title" /><figcaption aria-hidden="true">title</figcaption></figure></li></ul><h2 id="文本字体">2. 文本字体</h2><ul><li><p>在文字两端添加符号</p><p><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-strong">**加粗文字**</span><span class="hljs-emphasis">*斜体文字*</span><span class="hljs-strong">**<span class="hljs-emphasis">*斜体加粗文字*</span>**</span>~~加删除线的文字~~</code></pre></div></p></li><li><p>效果演示:</p><blockquote><p><strong>这是加粗的文字</strong></p><p><em>这是倾斜的文字</em></p><p><strong><em>这是斜体加粗的文字</em></strong></p><p><del>这是加删除线的文字</del></p></blockquote></li></ul><h2 id="区块引用">3. 区块引用</h2><ul><li><p>在文字前添加符号 <code>&gt;</code></p><p><div class="code-wrapper"><pre><code class="hljs ruby">&gt; 引用的内容<span class="hljs-meta prompt_">&gt;&gt;</span> 嵌套引用的内容</code></pre></div></p></li><li><p>效果演示:</p><blockquote><p>这是引用的内容</p><blockquote><p>这是嵌套引用的内容</p></blockquote></blockquote></li></ul><h2 id="水平分割线">4. 水平分割线</h2><ul><li><p>三个或者三个以上的 <code>-</code> 或者 <code>*</code> 。</p><p><div class="code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-bullet">---</span><span class="hljs-bullet"></span><span class="hljs-section">***</span><span class="hljs-section">--------</span></code></pre></div></p></li><li><p>效果演示:</p><hr /><blockquote><p>上面这条线就是水平分割线</p></blockquote></li></ul><h2 id="超链接">5. 超链接</h2><ul><li><p>格式：<code>[描述文字](链接地址)</code></p></li><li><p>举例： <div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-attr">[百度]</span>(<span class="hljs-attribute">http</span>:<span class="hljs-comment">//baidu.com)</span>[Visual Studio Code](<span class="hljs-attribute">https</span>:<span class="hljs-comment">//code.visualstudio.com/)</span></code></pre></div></p></li><li><p>效果演示：</p><blockquote><p><a href="http://baidu.com">百度</a></p><p><a href="https://code.visualstudio.com/">Visual Studio Code</a></p><p>单击上面的文字就可以跳转到相应的网页</p></blockquote></li></ul><h2 id="代码高亮">6. 代码高亮</h2><ul><li><p>反引号括起来：</p><ul><li><p>单行代码：使用一对单反引号括起来</p></li><li><p>代码片段：使用一对三反引号括起来（每个<code>```</code>独占一行）</p></li></ul></li><li><p>效果演示：</p><p><code>print("hello world")</code></p><p><div class="code-wrapper"><pre><code class="hljs python">string = <span class="hljs-string">&quot;不忘初心，牢记使命&quot;</span><span class="hljs-built_in">print</span>(string)</code></pre></div></p><blockquote><p>注：反引号就是键盘数字 1️⃣ 左边那个键</p></blockquote></li></ul><h2 id="列表">7. 列表</h2><ul><li><p>有序列表</p><p><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 列表内容<span class="hljs-bullet">2.</span> 列表内容<span class="hljs-bullet">3.</span> 列表内容注意：序号与内容之间要有空格</code></pre></div></p></li><li><p>无序列表</p><p><div class="code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>列表内容<span class="hljs-bullet">- </span>列表内容<span class="hljs-bullet">- </span>列表内容注意：- 与内容之间要有一个空格</code></pre></div></p></li></ul><h2 id="插入图片">8. 插入图片</h2><ul><li><p>通用语法：</p><p><div class="code-wrapper"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[图片alt]</span>(图片地址)图片alt就是对图片内容的解释，可省略。</code></pre></div></p></li><li><p>效果演示：</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/%E8%90%BD%E4%B8%8E%E5%90%9B%E8%AF%B4.jpg"alt="qr码" /><figcaption aria-hidden="true">qr码</figcaption></figure></li></ul><h2 id="插入表格">9. 插入表格</h2><ul><li><p>通用语法： <div class="code-wrapper"><pre><code class="hljs asciidoc">表头|表头|表头<span class="hljs-meta">:-:|:-:|:-:</span>内容|内容|内容内容|内容|内容第二行用于分割表头和内容。<span class="hljs-bullet">- </span>两边添加 : 表示文字居中示例：名字|颜色|爱好<span class="hljs-meta">:-:|:-:|:-:</span>大猫|橘|吃二猫|黑|睡小猫|绿|玩</code></pre></div></p></li><li><p>效果演示：</p></li></ul><table><thead><tr class="header"><th style="text-align: center;">名字</th><th style="text-align: center;">颜色</th><th style="text-align: center;">爱好</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">大猫</td><td style="text-align: center;">橘</td><td style="text-align: center;">吃</td></tr><tr class="even"><td style="text-align: center;">二猫</td><td style="text-align: center;">黑</td><td style="text-align: center;">睡</td></tr><tr class="odd"><td style="text-align: center;">小猫</td><td style="text-align: center;">绿</td><td style="text-align: center;">玩</td></tr></tbody></table><h2 id="数学公式">10. 数学公式</h2><ul><li><p>Markdown 支持 LaTex 公式，使用符号 <code>$</code></p><p><div class="code-wrapper"><pre><code class="hljs gams">行内公式：<span class="hljs-symbol">$</span>...<span class="hljs-symbol">$</span>行间公式：<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>...<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>示例：行内公式：<span class="hljs-symbol">$</span>\<span class="hljs-built_in">sqrt</span>&#123;x^<span class="hljs-number">2</span>+y^<span class="hljs-number">2</span>&#125;<span class="hljs-symbol">$</span>行间公式：<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>f(x)=\sum_&#123;i=<span class="hljs-number">0</span>&#125;^n \int_a^b&#123;g(t,i)dt&#125;<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span></code></pre></div></p></li><li><p>效果演示：</p><p>行内公式 <spanclass="math inline">\(\sqrt{x^2+y^2}\)</span>，随处可以插入</p><p>行间公式： <span class="math display">\[f(x)=\sum_{i=0}^n\int_a^b{g(t,i)dt}\]</span></p></li></ul><h2 id="其它语法">11. 其它语法</h2><ul><li>目录：<ul><li>在 Markdown 文件的开头输入 <code>[TOC]</code> ，实现目录（Table ofContent）</li><li>或者手动添加目录：<code>- [那么开始用markdown写作](#那么开始用markdown写作)</code></li></ul></li><li>脚注：<ul><li>在需要加注脚的文字后添加<code>[^注脚名]</code>，脚注自动搬运到文章末尾。</li><li>效果：这里需要一个脚注<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="这是脚注1的内容">[1]</span></a></sup></li></ul></li><li>邮箱：<ul><li>使用一对 <code>&lt;&gt;</code> 将邮箱括起来</li><li>举例：<code>&lt;lxp2000@outlook.com&gt;</code></li><li>效果：<a href="mailto:lxp2000@outlook.com"class="email">lxp2000@outlook.com</a></li></ul></li><li>文本换行：<ul><li>使用 <code>&lt;br&gt;</code> 或 <code>&lt;br/&gt;</code> 或<code>&lt;br /&gt;</code></li><li>举例：<code>不忘初心&lt;br/&gt;牢记使命</code></li></ul></li><li>HTML 语法：Markdown 支持原生 HTML语法</li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>这是脚注1的内容<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Markdown那些事</title>
    <link href="/2023/01/14/%E5%85%B3%E4%BA%8EMarkdown%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <url>/2023/01/14/%E5%85%B3%E4%BA%8EMarkdown%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="markdown-是什么">Markdown 是什么</h1><ul><li><p>Markdown是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式来编写文档，方便地转换为XHTML（或者HTML）文档。</p></li><li><p>由于 Markdown的轻量化、易读易写特性，并且支持图片，图表、数学公式，许多网站都广泛使用Markdown 来撰写帮助文档或是用于论坛上发表消息。如GitHub、CSDN、简书等，甚至还能用于撰写电子书。</p><blockquote><p>简单来说，它可以免去你繁琐的排版工作，而更加专注于写作。</p><p>详细介绍请看 <ahref="https://baike.baidu.com/item/markdown/3245829?fr=aladdin">百度百科</a></p></blockquote></li></ul><h1 id="markdown-用来做什么">Markdown 用来做什么</h1><ul><li><p>编写说明文档，用它写的文档很多技术论坛、平台都能通用；</p></li><li><p>撰写博客文章，可以使文字、代码都非常清晰易读；</p></li><li><p>Markdown 格式转换方便，可以轻松地将文本转换为 HTML、PDF 等。</p><blockquote><p>近几年随着相关应用平台的发展，Markdown以其独到的优势迅速火起来了。</p><p>Markdown的标记很少，常用的也就十个左右，它是一种非常轻量的标记语言，因此深受技术人员的喜爱。</p><p>更多内容可见知乎问答：<ahref="https://www.zhihu.com/question/20958887">md文件怎么用？</a></p></blockquote></li></ul><h1 id="markdown-文件怎么打开">Markdown 文件怎么打开</h1><p>如果你只是想阅读一个 .md 文件，又不想下载 Markdown编辑器，一个好方法是在浏览器中通过插件阅读。</p><ol type="1"><li><p>以 Edge 浏览器为例，在浏览器中搜索并安装 <ahref="https://microsoftedge.microsoft.com/addons/detail/markdown-viewer/cgfmehpekedojlmjepoimbfcafopimdg?hl=zh-CN">MarkdownViewer</a></p><blockquote><p>勾选 “允许访问文件 URL”</p></blockquote></li><li><p>在浏览器地址栏粘贴相应的 .md本地文件地址，例如：<code>C:\Users\user\Desktop\markdown.md</code>，即可阅读.md文件。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/202301141825719.png" /></p></li></ol><h1 id="markdown-编辑器推荐">Markdown 编辑器推荐</h1><ol type="1"><li><p>平台集成工具：各大论坛、社区平台自带写作工具，你可以直接在知乎、简书、CSDN等论坛社区创作。</p></li><li><p><a href="https://www.typora.io/">Typora</a></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/tyu.png" /></p><p>Typora 是一款小巧、轻量的 Markdown编辑器，它的特点是所见即所得，能够对你编辑的内容进行实时预览。支持多种公式类型，支持 TOC等标签。可以轻松添加标题、行内代码、内联格式、公式、图像。</p></li><li><p><a href="https://code.visualstudio.com/">Visual StudioCode</a></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/vs.jpg" /></p><p>支持几乎所有的语言，拥有它，你就拥有了全世界！用它写 Markdown文档只是冰山一角。</p><blockquote><p>VSCode 默认支持Markdown，只需要安装一个预览插件：<code>Markdown Preview Enhanced</code>或 <code>Markdown All in One</code></p></blockquote></li></ol><hr /><blockquote><p>支持 Markdown的编辑器太多，有插件、独立软件等各种形式，功能也不完全一致。有的用于基本写作，有的用来写代码，有的只是博客平台配套的编辑器。这里仅列举两款编辑器。</p></blockquote><hr /><h1 id="关于-markdown-笔记插入图片的问题">关于 Markdown笔记插入图片的问题</h1><p>Markdown 笔记插入图片，基本有以下 3 种方式：</p><ol type="1"><li><p>插入本地图片</p><ul><li><p>使用相对路径</p><p>例如一个名为 1.png 的图片和 .md文件放在同一目录下，你就可以用这种方式插入图片:<code>![](1.ipg)</code></p></li><li><p>使用绝对路径，不推荐。(如 <code>![](C:\1.png)</code>)</p></li></ul><blockquote><p>缺点是不灵活、不好分享，本地图片的路径更改或丢失都会造成 Markdown文件调不出图。</p></blockquote></li><li><p>使用图床工具</p><p>图床一般是指储存图片的服务器，专门存储图片，上传后就可以获得图片的对外链接。</p><p>比如 <a href="http://www.superbed.cn/">聚合图床</a></p><blockquote><p>免费图床只需上传图片，就可以生成外链，很方便地插入 Markdown。</p><p>但是很多免费图床存在服务器不稳定、网站倒闭等隐患，往往不能长久存在！</p></blockquote></li><li><p>利用 GitHub 存储图片，在 Markdown 中引用图片链接</p><ul><li><p>将需要用到的图片上传至 git 仓库；</p></li><li><p>在仓库根目录下建立文件夹，用于存储图片。</p></li></ul><blockquote><p>如果你使用 GitHub Pages 搭建了自己的博客，当然这种方式更加方便。</p><p>详细教程，请看我的另一篇博客：</p><p><ahref="https://luminous-ee.github.io/2023/01/15/Github-jsDelivr-PicGo%E6%90%AD%E5%BB%BA%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/">Github+jsDelivr+PicGo，搭建高速稳定免费的个人图床</a></p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gridea+GitHub Pages搭建个人静态博客</title>
    <link href="/2023/01/13/Gridea-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/01/13/Gridea-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="grideagithub-pages搭建">Gridea+GitHub Pages搭建</h1><ol type="1"><li><p>创建并登录你的 GitHub 账号。</p><p><a href="https://github.com/">GitHub</a></p></li><li><p>创建一个公开仓库，名为<code>xxx.github.io</code>。（xxx为你的GitHub 用户名）</p><blockquote><p>选择 <code>Public</code>（公开仓库）</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/g1_LI.jpg"alt="avater" /><figcaption aria-hidden="true">avater</figcaption></figure></li><li><p>进入账户设置:</p><ul><li><p><code>Settings</code>-&gt;<code>Developer settings</code>-&gt;<code>Personal access tokens</code>-&gt;生成新的token</p></li><li><p><code>Note</code>做一些描述，勾选上 <code>repo</code>的相关权限，即可生成一个 Token。如下图：</p></li></ul><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/g2.png" /></p><blockquote><p>注意：生成之后记得把 Token复制到你的本地，因为一旦关闭网页将不能再看到它。</p></blockquote></li></ol><h1 id="开始gridea配置">开始Gridea配置</h1><ol type="1"><li><p>Gridea 进行远程设置</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/g3.png" /></p></li><li><p>点击「检测远程链接」，进行配置检查。</p></li><li><p>点击 Gridea 中的<code>同步</code>按钮即可。</p><blockquote><p>初次部署等待几分钟，之后就可以去浏览器访问你的域名（即<code>xxx.github.io</code>）</p></blockquote></li><li><p>你可以做一些自定义配置</p><ul><li><p>自定义菜单</p></li><li><p>任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p></li></ul><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/g4.png" /></p></li></ol><h1 id="开启评论功能">开启评论功能</h1><p>Gridea 支持 Gitalk 和 Disqus 两种评论系统，这里介绍 Gitalk 评论。</p><blockquote><p>Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。</p></blockquote><ol type="1"><li><p>点此注册：<ahref="https://github.com/settings/applications/new">Register a new OAuthapplication</a></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/g5.png" /></p></li><li><p>将 Client ID 和 Client Secret 复制保存到本地</p><blockquote><p>请务必现在复制您的Client Secret，关闭网页后你再也看不到它了。</p></blockquote></li><li><p>在Gridea中设置、保存、同步，评论功能开启。</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/g6.png" /></p></li></ol><h1 id="现在开启你的博客之旅">现在，开启你的博客之旅。</h1>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/2022/12/11/hello-hexo/"/>
    <url>/2022/12/11/hello-hexo/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre></div><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello-gridea</title>
    <link href="/2022/12/11/hello-gridea/"/>
    <url>/2022/12/11/hello-gridea/</url>
    
    <content type="html"><![CDATA[<p>👏 欢迎使用 <strong>Gridea</strong> ！<br />✍️ <strong>Gridea</strong>一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意......</p><span id="more"></span><p><a href="https://github.com/getgridea/gridea">Github</a><br /><a href="https://gridea.dev/">Gridea 主页</a><br /><a href="http://fehey.com/">示例网站</a></p><h2 id="特性">特性👇</h2><p>📝 你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p><p>🌉 你可以给文章配上精美的封面图和在文章任意位置插入图片</p><p>🏷️ 你可以对文章进行标签分组</p><p>📋 你可以自定义菜单，甚至可以创建外部链接菜单</p><p>💻 你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或<strong>Linux</strong> 设备上使用此客户端</p><p>🌎 你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>CodingPages</strong> 向世界展示，未来将支持更多平台</p><p>💬 你可以进行简单的配置，接入 <ahref="https://github.com/gitalk/gitalk">Gitalk</a> 或 <ahref="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p><p>🇬🇧 你可以使用<strong>中文简体</strong>或<strong>英语</strong></p><p>🌁你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p><p>🖥 你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox等进行多设备同步</p><p>🌱 当然 <strong>Gridea</strong>还很年轻，有很多不足，但请相信，它会不停向前 🏃</p><p>未来，它一定会成为你离不开的伙伴</p><p>尽情发挥你的才华吧！</p><p>😘 Enjoy~</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
